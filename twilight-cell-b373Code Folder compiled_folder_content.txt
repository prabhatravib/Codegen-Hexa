C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\.gitignore:
# Logs

logs
_.log
npm-debug.log_
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)

report.[0-9]_.[0-9]_.[0-9]_.[0-9]_.json

# Runtime data

pids
_.pid
_.seed
\*.pid.lock

# Dependency directories

node_modules/
jspm_packages/

# TypeScript cache

\*.tsbuildinfo

# Optional npm cache directory

.npm

# Optional eslint cache

.eslintcache

# Optional stylelint cache

.stylelintcache

# Optional REPL history

.node_repl_history

# Output of 'npm pack'

\*.tgz

# public

# Stores VSCode versions used for testing VSCode extensions

.vscode-test

# wrangler project

.dev.vars*
!.dev.vars.example
.env*
!.env.example
.wrangler/

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\.gitignore ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\.python-version:
3.11
--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\.python-version ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\create_notebook.py:
#!/usr/bin/env python3
"""Create the Marimo notebook file during Docker build"""

import os
from pathlib import Path

def create_notebook():
    """Create the notebook file with proper content"""
    
    # Create notebooks directory
    notebooks_dir = Path("/app/notebooks")
    notebooks_dir.mkdir(exist_ok=True)
    
    # Create the notebook file
    notebook_path = notebooks_dir / "d6367d62_notebook.py"
    
    # Simple notebook content to test basic functionality
    content = '''import marimo as mo

# Initialize the Marimo app
app = mo.App()

@app.cell
def __():
    return "Hello from Marimo!"

@app.cell
def __():
    return 42
'''
    
    # Write the notebook
    notebook_path.write_text(content, encoding='utf-8')
    print(f"Created notebook: {notebook_path}")
    
    # Verify the file was created
    if notebook_path.exists():
        print(f"Notebook file exists: {notebook_path}")
        print(f"File size: {notebook_path.stat().st_size} bytes")
    else:
        print("ERROR: Notebook file was not created!")

if __name__ == "__main__":
    create_notebook()

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\create_notebook.py ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\Dockerfile:
# syntax=docker/dockerfile:1.4
FROM python:3.11-slim

# Fast, reproducible installs with uv (optional but good)
# COPY --from=ghcr.io/astral-sh/uv:0.4.20 /uv /bin/uv
# ENV UV_SYSTEM_PYTHON=1
WORKDIR /app

# System deps - keep minimal
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential && rm -rf /var/lib/apt/lists/*

# App files
COPY requirements.txt /app/requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Copy the startup script and other code
COPY . /app

# Create notebooks directory
RUN mkdir -p /app/notebooks

# Copy the pre-made notebook file
COPY minimal_notebook.py /app/notebooks/workspace.py

# Verify the notebook file was copied
RUN ls -la /app/notebooks/ && \
    cat /app/notebooks/workspace.py

# Set Marimo environment variables for stability
ENV MARIMO_SKIP_UPDATE_CHECK=1
ENV MARIMO_LOG_LEVEL=INFO

# Expose Marimo default port
EXPOSE 2718

# Create a startup script to handle Marimo startup more robustly
RUN echo '#!/bin/bash\n\
echo "Starting Marimo server..."\n\
cd /app/notebooks\n\
python -m marimo edit --host 0.0.0.0 --port 2718 --no-token --skip-update-check workspace.py\n\
' > /app/start.sh && chmod +x /app/start.sh

# Use the startup script instead of direct command
CMD ["/app/start.sh"]

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\Dockerfile ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\generate_uuid_notebook.py:
#!/usr/bin/env python3
import uuid
import os
from pathlib import Path

def generate_uuid_notebook():
    """Generate a random UUID and create a notebook with that name"""
    
    # Generate a random UUID and take first 8 characters
    notebook_id = str(uuid.uuid4())[:8]
    notebook_name = f"{notebook_id}_notebook.py"
    
    print(f"Generated UUID: {notebook_id}")
    print(f"Notebook name: {notebook_name}")
    
    # Create notebooks directory if it doesn't exist
    notebooks_dir = Path("notebooks")
    notebooks_dir.mkdir(exist_ok=True)
    
    # Create the notebook file
    notebook_path = notebooks_dir / notebook_name
    
    # Notebook content (without emojis to avoid encoding issues)
    content = f'''import marimo as mo

# Initialize the Marimo app
app = mo.App()

@app.cell
def __():
    """Welcome to Marimo Notebook!"""
    mo.md(f"""
    # Marimo Notebook {notebook_id}
    
    This notebook is running on Cloudflare Containers.
    Each session gets a unique notebook ID for isolation.
    
    **Notebook ID:** {notebook_id}
    """)
    return f"Notebook {notebook_id} is ready!"

@app.cell
def __():
    """Sample data generation"""
    import numpy as np
    data = np.random.randn(100)
    return data

@app.cell
def __():
    """Interactive elements"""
    slider = mo.ui.slider(0, 100, value=50, label="Value")
    return slider

@app.cell
def __():
    """Display the slider value"""
    slider_value = slider.value
    mo.md(f"**Slider value:** {{slider_value}}")
    return slider_value
'''
    
    # Write the notebook with UTF-8 encoding
    notebook_path.write_text(content, encoding='utf-8')
    print(f"Created notebook: {notebook_path}")
    
    # Update the Dockerfile with the new notebook name
    dockerfile_path = Path("Dockerfile")
    if dockerfile_path.exists():
        # Read current Dockerfile
        with open(dockerfile_path, 'r', encoding='utf-8') as f:
            dockerfile_content = f.read()
        
        # Replace the notebook path in the CMD line
        old_cmd = 'CMD ["python", "-m", "marimo", "edit", "--host", "0.0.0.0", "--port", "2718", "--headless", "--no-token", "--skip-update-check", "/app/notebooks/a1b2c3d4_marimo_notebook.py"]'
        new_cmd = f'CMD ["python", "-m", "marimo", "edit", "--host", "0.0.0.0", "--port", "2718", "--headless", "--no-token", "--skip-update-check", "/app/notebooks/{notebook_name}"]'
        
        dockerfile_content = dockerfile_content.replace(old_cmd, new_cmd)
        
        # Write updated Dockerfile
        with open(dockerfile_path, 'w', encoding='utf-8') as f:
            f.write(dockerfile_content)
        
        print(f"Updated Dockerfile to use: {notebook_name}")
    
    # Update the redirect HTML to point to the new notebook
    html_path = Path("public/index.html")
    if html_path.exists():
        with open(html_path, 'r', encoding='utf-8') as f:
            html_content = f.read()
        
        # Replace the notebook URL in the HTML
        old_url = '/a1b2c3d4_marimo_notebook.py'
        new_url = f'/{notebook_name}'
        
        html_content = html_content.replace(old_url, new_url)
        
        with open(html_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"Updated HTML redirect to: {new_url}")
    
    print(f"Successfully created notebook with UUID: {notebook_id}")
    print(f"Notebook file: {notebook_path}")
    print(f"Dockerfile updated")
    print(f"HTML redirect updated")
    print(f"Ready to deploy with: wrangler deploy")
    
    return notebook_id, notebook_name

if __name__ == "__main__":
    generate_uuid_notebook()

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\generate_uuid_notebook.py ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\minimal_notebook.py:
import marimo as mo

app = mo.App()

@app.cell
def __():
    return "Hello World"

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\minimal_notebook.py ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\NOTEBOOK_CREATION_README.md:
# Marimo Notebook Creation for Cloudflare Containers

This project now creates a fresh Marimo notebook on each session, ensuring each user gets a clean workspace.

## üöÄ Features

- **Fresh Notebooks**: Each container session creates a new notebook
- **Timestamped Names**: Notebooks are named with timestamps (e.g., `notebook_20241201_143022.py`)
- **Direct Access**: No landing page - users go straight to the notebook editor
- **Starter Template**: Each notebook includes helpful starter code and examples

## üìÅ File Structure

```
twilight-cell-b373/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ start_marimo.py      # Main startup script with notebook creation
‚îÇ   ‚îî‚îÄ‚îÄ index.ts             # Cloudflare Worker entry point
‚îú‚îÄ‚îÄ Dockerfile               # Updated to use custom startup script
‚îú‚îÄ‚îÄ requirements.txt         # Python dependencies
‚îî‚îÄ‚îÄ test_notebook_creation.py # Local testing script
```

## üîß How It Works

### 1. Notebook Creation
The `create_new_notebook()` function:
- Generates unique notebook names using timestamps
- Creates a starter template with helpful code examples
- Places notebooks in the `/app/notebooks` directory

### 2. Marimo Server Startup
The `start_marimo_server()` function:
- Starts Marimo with the specific notebook file (not directory)
- Uses `--headless` mode for container deployment
- Configures proper networking for Cloudflare Containers

### 3. Session Management
- Each container restart creates a new notebook
- Notebooks are timestamped for uniqueness
- Users get a fresh workspace every time

## üöÄ Deployment

### Deploy to Cloudflare
```bash
cd twilight-cell-b373
wrangler deploy
```

### Local Testing
```bash
# Test notebook creation locally
python test_notebook_creation.py

# Build and test Docker container
docker build -t marimo-test .
docker run -p 2718:2718 marimo-test
```

## ‚öôÔ∏è Configuration Options

### Timestamped vs Fixed Names
In `src/start_marimo.py`, you can control notebook naming:

```python
# For unique notebooks per session (default)
notebook_file = create_new_notebook(notebooks_dir, use_timestamp=True)

# For fixed name (overwrites on each restart)
notebook_file = create_new_notebook(notebooks_dir, use_timestamp=False)
```

### Custom Starter Templates
Modify the `starter_content` in `create_new_notebook()` to customize the initial notebook content.

## üéØ Benefits

1. **Fresh Start**: Each session is clean and ready for new work
2. **No Landing Page**: Users go directly to coding
3. **Unique Notebooks**: Timestamped names prevent conflicts
4. **Starter Code**: Helpful examples get users started quickly
5. **Container Ready**: Optimized for Cloudflare Containers deployment

## üîç Troubleshooting

### Common Issues

1. **Port Already in Use**: Ensure port 2718 is available
2. **Permission Errors**: Check Docker container permissions
3. **Notebook Not Loading**: Verify the startup script is running correctly

### Debug Mode
The startup script includes detailed logging. Check container logs for troubleshooting information.

## üìù Customization

### Adding More Dependencies
Update `requirements.txt` to include additional Python packages.

### Custom Notebook Templates
Modify the `starter_content` variable in `create_new_notebook()` to include your preferred starter code.

### Multiple Template Options
You can extend the system to choose from multiple templates based on user preferences or URL parameters.

## üöÄ Next Steps

Consider these enhancements:
- URL-based template selection
- Notebook persistence between sessions
- Multiple pre-configured templates
- User preference storage
- Collaborative notebook sharing

---

**Note**: This implementation ensures each Cloudflare Container session provides a fresh, ready-to-use Marimo notebook environment.

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\NOTEBOOK_CREATION_README.md ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\package-lock.json:
{
	"name": "twilight-cell-b373",
	"version": "0.0.0",
	"lockfileVersion": 3,
	"requires": true,
	"packages": {
		"": {
			"name": "twilight-cell-b373",
			"version": "0.0.0",
			"dependencies": {
				"@cloudflare/containers": "^0.0.26"
			},
			"devDependencies": {
				"wrangler": "^4.32.0"
			}
		},
		"node_modules/@cloudflare/containers": {
			"version": "0.0.26",
			"resolved": "https://registry.npmjs.org/@cloudflare/containers/-/containers-0.0.26.tgz",
			"integrity": "sha512-5uO/bcGOKtsBpVd+H7XUy7eN414OVMpMpyHlB/aFLTsvqKOX18l8F4bw1NCuyE/cV1ZAA44jEjL6LbcO6RpyLQ==",
			"license": "ISC"
		},
		"node_modules/@cloudflare/kv-asset-handler": {
			"version": "0.4.0",
			"resolved": "https://registry.npmjs.org/@cloudflare/kv-asset-handler/-/kv-asset-handler-0.4.0.tgz",
			"integrity": "sha512-+tv3z+SPp+gqTIcImN9o0hqE9xyfQjI1XD9pL6NuKjua9B1y7mNYv0S9cP+QEbA4ppVgGZEmKOvHX5G5Ei1CVA==",
			"dev": true,
			"license": "MIT OR Apache-2.0",
			"dependencies": {
				"mime": "^3.0.0"
			},
			"engines": {
				"node": ">=18.0.0"
			}
		},
		"node_modules/@cloudflare/unenv-preset": {
			"version": "2.6.2",
			"resolved": "https://registry.npmjs.org/@cloudflare/unenv-preset/-/unenv-preset-2.6.2.tgz",
			"integrity": "sha512-C7/tW7Qy+wGOCmHXu7xpP1TF3uIhRoi7zVY7dmu/SOSGjPilK+lSQ2lIRILulZsT467ZJNlI0jBxMbd8LzkGRg==",
			"dev": true,
			"license": "MIT OR Apache-2.0",
			"peerDependencies": {
				"unenv": "2.0.0-rc.19",
				"workerd": "^1.20250802.0"
			},
			"peerDependenciesMeta": {
				"workerd": {
					"optional": true
				}
			}
		},
		"node_modules/@cloudflare/workerd-darwin-64": {
			"version": "1.20250816.0",
			"resolved": "https://registry.npmjs.org/@cloudflare/workerd-darwin-64/-/workerd-darwin-64-1.20250816.0.tgz",
			"integrity": "sha512-yN1Rga4ufTdrJPCP4gEqfB47i1lWi3teY5IoeQbUuKnjnCtm4pZvXur526JzCmaw60Jx+AEWf5tizdwRd5hHBQ==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "Apache-2.0",
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": ">=16"
			}
		},
		"node_modules/@cloudflare/workerd-darwin-arm64": {
			"version": "1.20250816.0",
			"resolved": "https://registry.npmjs.org/@cloudflare/workerd-darwin-arm64/-/workerd-darwin-arm64-1.20250816.0.tgz",
			"integrity": "sha512-WyKPMQhbU+TTf4uDz3SA7ZObspg7WzyJMv/7J4grSddpdx2A4Y4SfPu3wsZleAOIMOAEVi0A1sYDhdltKM7Mxg==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "Apache-2.0",
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": ">=16"
			}
		},
		"node_modules/@cloudflare/workerd-linux-64": {
			"version": "1.20250816.0",
			"resolved": "https://registry.npmjs.org/@cloudflare/workerd-linux-64/-/workerd-linux-64-1.20250816.0.tgz",
			"integrity": "sha512-NWHOuFnVBaPRhLHw8kjPO9GJmc2P/CTYbnNlNm0EThyi57o/oDx0ldWLJqEHlrdEPOw7zEVGBqM/6M+V9agC6w==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "Apache-2.0",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=16"
			}
		},
		"node_modules/@cloudflare/workerd-linux-arm64": {
			"version": "1.20250816.0",
			"resolved": "https://registry.npmjs.org/@cloudflare/workerd-linux-arm64/-/workerd-linux-arm64-1.20250816.0.tgz",
			"integrity": "sha512-FR+/yhaWs7FhfC3GKsM3+usQVrGEweJ9qyh7p+R6HNwnobgKr/h5ATWvJ4obGJF6ZHHodgSe+gOSYR7fkJ1xAQ==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "Apache-2.0",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=16"
			}
		},
		"node_modules/@cloudflare/workerd-windows-64": {
			"version": "1.20250816.0",
			"resolved": "https://registry.npmjs.org/@cloudflare/workerd-windows-64/-/workerd-windows-64-1.20250816.0.tgz",
			"integrity": "sha512-0lqClj2UMhFa8tCBiiX7Zhd5Bjp0V+X8oNBG6V6WsR9p9/HlIHAGgwRAM7aYkyG+8KC8xlbC89O2AXUXLpHx0g==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "Apache-2.0",
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": ">=16"
			}
		},
		"node_modules/@cspotcode/source-map-support": {
			"version": "0.8.1",
			"resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
			"integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@jridgewell/trace-mapping": "0.3.9"
			},
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@emnapi/runtime": {
			"version": "1.4.5",
			"resolved": "https://registry.npmjs.org/@emnapi/runtime/-/runtime-1.4.5.tgz",
			"integrity": "sha512-++LApOtY0pEEz1zrd9vy1/zXVaVJJ/EbAF3u0fXIzPJEDtnITsBGbbK0EkM72amhl/R5b+5xx0Y/QhcVOpuulg==",
			"dev": true,
			"license": "MIT",
			"optional": true,
			"dependencies": {
				"tslib": "^2.4.0"
			}
		},
		"node_modules/@esbuild/aix-ppc64": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.4.tgz",
			"integrity": "sha512-1VCICWypeQKhVbE9oW/sJaAmjLxhVqacdkvPLEjwlttjfwENRSClS8EjBz0KzRyFSCPDIkuXW34Je/vk7zdB7Q==",
			"cpu": [
				"ppc64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"aix"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/android-arm": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.4.tgz",
			"integrity": "sha512-QNdQEps7DfFwE3hXiU4BZeOV68HHzYwGd0Nthhd3uCkkEKK7/R6MTgM0P7H7FAs5pU/DIWsviMmEGxEoxIZ+ZQ==",
			"cpu": [
				"arm"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"android"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/android-arm64": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.4.tgz",
			"integrity": "sha512-bBy69pgfhMGtCnwpC/x5QhfxAz/cBgQ9enbtwjf6V9lnPI/hMyT9iWpR1arm0l3kttTr4L0KSLpKmLp/ilKS9A==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"android"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/android-x64": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.4.tgz",
			"integrity": "sha512-TVhdVtQIFuVpIIR282btcGC2oGQoSfZfmBdTip2anCaVYcqWlZXGcdcKIUklfX2wj0JklNYgz39OBqh2cqXvcQ==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"android"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/darwin-arm64": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.4.tgz",
			"integrity": "sha512-Y1giCfM4nlHDWEfSckMzeWNdQS31BQGs9/rouw6Ub91tkK79aIMTH3q9xHvzH8d0wDru5Ci0kWB8b3up/nl16g==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/darwin-x64": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.4.tgz",
			"integrity": "sha512-CJsry8ZGM5VFVeyUYB3cdKpd/H69PYez4eJh1W/t38vzutdjEjtP7hB6eLKBoOdxcAlCtEYHzQ/PJ/oU9I4u0A==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/freebsd-arm64": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.4.tgz",
			"integrity": "sha512-yYq+39NlTRzU2XmoPW4l5Ifpl9fqSk0nAJYM/V/WUGPEFfek1epLHJIkTQM6bBs1swApjO5nWgvr843g6TjxuQ==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"freebsd"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/freebsd-x64": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.4.tgz",
			"integrity": "sha512-0FgvOJ6UUMflsHSPLzdfDnnBBVoCDtBTVyn/MrWloUNvq/5SFmh13l3dvgRPkDihRxb77Y17MbqbCAa2strMQQ==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"freebsd"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/linux-arm": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.4.tgz",
			"integrity": "sha512-kro4c0P85GMfFYqW4TWOpvmF8rFShbWGnrLqlzp4X1TNWjRY3JMYUfDCtOxPKOIY8B0WC8HN51hGP4I4hz4AaQ==",
			"cpu": [
				"arm"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/linux-arm64": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.4.tgz",
			"integrity": "sha512-+89UsQTfXdmjIvZS6nUnOOLoXnkUTB9hR5QAeLrQdzOSWZvNSAXAtcRDHWtqAUtAmv7ZM1WPOOeSxDzzzMogiQ==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/linux-ia32": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.4.tgz",
			"integrity": "sha512-yTEjoapy8UP3rv8dB0ip3AfMpRbyhSN3+hY8mo/i4QXFeDxmiYbEKp3ZRjBKcOP862Ua4b1PDfwlvbuwY7hIGQ==",
			"cpu": [
				"ia32"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/linux-loong64": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.4.tgz",
			"integrity": "sha512-NeqqYkrcGzFwi6CGRGNMOjWGGSYOpqwCjS9fvaUlX5s3zwOtn1qwg1s2iE2svBe4Q/YOG1q6875lcAoQK/F4VA==",
			"cpu": [
				"loong64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/linux-mips64el": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.4.tgz",
			"integrity": "sha512-IcvTlF9dtLrfL/M8WgNI/qJYBENP3ekgsHbYUIzEzq5XJzzVEV/fXY9WFPfEEXmu3ck2qJP8LG/p3Q8f7Zc2Xg==",
			"cpu": [
				"mips64el"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/linux-ppc64": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.4.tgz",
			"integrity": "sha512-HOy0aLTJTVtoTeGZh4HSXaO6M95qu4k5lJcH4gxv56iaycfz1S8GO/5Jh6X4Y1YiI0h7cRyLi+HixMR+88swag==",
			"cpu": [
				"ppc64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/linux-riscv64": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.4.tgz",
			"integrity": "sha512-i8JUDAufpz9jOzo4yIShCTcXzS07vEgWzyX3NH2G7LEFVgrLEhjwL3ajFE4fZI3I4ZgiM7JH3GQ7ReObROvSUA==",
			"cpu": [
				"riscv64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/linux-s390x": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.4.tgz",
			"integrity": "sha512-jFnu+6UbLlzIjPQpWCNh5QtrcNfMLjgIavnwPQAfoGx4q17ocOU9MsQ2QVvFxwQoWpZT8DvTLooTvmOQXkO51g==",
			"cpu": [
				"s390x"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/linux-x64": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.4.tgz",
			"integrity": "sha512-6e0cvXwzOnVWJHq+mskP8DNSrKBr1bULBvnFLpc1KY+d+irZSgZ02TGse5FsafKS5jg2e4pbvK6TPXaF/A6+CA==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/netbsd-arm64": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.4.tgz",
			"integrity": "sha512-vUnkBYxZW4hL/ie91hSqaSNjulOnYXE1VSLusnvHg2u3jewJBz3YzB9+oCw8DABeVqZGg94t9tyZFoHma8gWZQ==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"netbsd"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/netbsd-x64": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.4.tgz",
			"integrity": "sha512-XAg8pIQn5CzhOB8odIcAm42QsOfa98SBeKUdo4xa8OvX8LbMZqEtgeWE9P/Wxt7MlG2QqvjGths+nq48TrUiKw==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"netbsd"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/openbsd-arm64": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.4.tgz",
			"integrity": "sha512-Ct2WcFEANlFDtp1nVAXSNBPDxyU+j7+tId//iHXU2f/lN5AmO4zLyhDcpR5Cz1r08mVxzt3Jpyt4PmXQ1O6+7A==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"openbsd"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/openbsd-x64": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.4.tgz",
			"integrity": "sha512-xAGGhyOQ9Otm1Xu8NT1ifGLnA6M3sJxZ6ixylb+vIUVzvvd6GOALpwQrYrtlPouMqd/vSbgehz6HaVk4+7Afhw==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"openbsd"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/sunos-x64": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.4.tgz",
			"integrity": "sha512-Mw+tzy4pp6wZEK0+Lwr76pWLjrtjmJyUB23tHKqEDP74R3q95luY/bXqXZeYl4NYlvwOqoRKlInQialgCKy67Q==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"sunos"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/win32-arm64": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.4.tgz",
			"integrity": "sha512-AVUP428VQTSddguz9dO9ngb+E5aScyg7nOeJDrF1HPYu555gmza3bDGMPhmVXL8svDSoqPCsCPjb265yG/kLKQ==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/win32-ia32": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.4.tgz",
			"integrity": "sha512-i1sW+1i+oWvQzSgfRcxxG2k4I9n3O9NRqy8U+uugaT2Dy7kLO9Y7wI72haOahxceMX8hZAzgGou1FhndRldxRg==",
			"cpu": [
				"ia32"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@esbuild/win32-x64": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.4.tgz",
			"integrity": "sha512-nOT2vZNw6hJ+z43oP1SPea/G/6AbN6X+bGNhNuq8NtRHy4wsMhw765IKLNmnjek7GvjWBYQ8Q5VBoYTFg9y1UQ==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@img/sharp-darwin-arm64": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-darwin-arm64/-/sharp-darwin-arm64-0.33.5.tgz",
			"integrity": "sha512-UT4p+iz/2H4twwAoLCqfA9UH5pI6DggwKEGuaPy7nCVQ8ZsiY5PIcrRvD1DzuY3qYL07NtIQcWnBSY/heikIFQ==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "Apache-2.0",
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			},
			"optionalDependencies": {
				"@img/sharp-libvips-darwin-arm64": "1.0.4"
			}
		},
		"node_modules/@img/sharp-darwin-x64": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-darwin-x64/-/sharp-darwin-x64-0.33.5.tgz",
			"integrity": "sha512-fyHac4jIc1ANYGRDxtiqelIbdWkIuQaI84Mv45KvGRRxSAa7o7d1ZKAOBaYbnepLC1WqxfpimdeWfvqqSGwR2Q==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "Apache-2.0",
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			},
			"optionalDependencies": {
				"@img/sharp-libvips-darwin-x64": "1.0.4"
			}
		},
		"node_modules/@img/sharp-libvips-darwin-arm64": {
			"version": "1.0.4",
			"resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-arm64/-/sharp-libvips-darwin-arm64-1.0.4.tgz",
			"integrity": "sha512-XblONe153h0O2zuFfTAbQYAX2JhYmDHeWikp1LM9Hul9gVPjFY427k6dFEcOL72O01QxQsWi761svJ/ev9xEDg==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "LGPL-3.0-or-later",
			"optional": true,
			"os": [
				"darwin"
			],
			"funding": {
				"url": "https://opencollective.com/libvips"
			}
		},
		"node_modules/@img/sharp-libvips-darwin-x64": {
			"version": "1.0.4",
			"resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-x64/-/sharp-libvips-darwin-x64-1.0.4.tgz",
			"integrity": "sha512-xnGR8YuZYfJGmWPvmlunFaWJsb9T/AO2ykoP3Fz/0X5XV2aoYBPkX6xqCQvUTKKiLddarLaxpzNe+b1hjeWHAQ==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "LGPL-3.0-or-later",
			"optional": true,
			"os": [
				"darwin"
			],
			"funding": {
				"url": "https://opencollective.com/libvips"
			}
		},
		"node_modules/@img/sharp-libvips-linux-arm": {
			"version": "1.0.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm/-/sharp-libvips-linux-arm-1.0.5.tgz",
			"integrity": "sha512-gvcC4ACAOPRNATg/ov8/MnbxFDJqf/pDePbBnuBDcjsI8PssmjoKMAz4LtLaVi+OnSb5FK/yIOamqDwGmXW32g==",
			"cpu": [
				"arm"
			],
			"dev": true,
			"license": "LGPL-3.0-or-later",
			"optional": true,
			"os": [
				"linux"
			],
			"funding": {
				"url": "https://opencollective.com/libvips"
			}
		},
		"node_modules/@img/sharp-libvips-linux-arm64": {
			"version": "1.0.4",
			"resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm64/-/sharp-libvips-linux-arm64-1.0.4.tgz",
			"integrity": "sha512-9B+taZ8DlyyqzZQnoeIvDVR/2F4EbMepXMc/NdVbkzsJbzkUjhXv/70GQJ7tdLA4YJgNP25zukcxpX2/SueNrA==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "LGPL-3.0-or-later",
			"optional": true,
			"os": [
				"linux"
			],
			"funding": {
				"url": "https://opencollective.com/libvips"
			}
		},
		"node_modules/@img/sharp-libvips-linux-s390x": {
			"version": "1.0.4",
			"resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-s390x/-/sharp-libvips-linux-s390x-1.0.4.tgz",
			"integrity": "sha512-u7Wz6ntiSSgGSGcjZ55im6uvTrOxSIS8/dgoVMoiGE9I6JAfU50yH5BoDlYA1tcuGS7g/QNtetJnxA6QEsCVTA==",
			"cpu": [
				"s390x"
			],
			"dev": true,
			"license": "LGPL-3.0-or-later",
			"optional": true,
			"os": [
				"linux"
			],
			"funding": {
				"url": "https://opencollective.com/libvips"
			}
		},
		"node_modules/@img/sharp-libvips-linux-x64": {
			"version": "1.0.4",
			"resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-x64/-/sharp-libvips-linux-x64-1.0.4.tgz",
			"integrity": "sha512-MmWmQ3iPFZr0Iev+BAgVMb3ZyC4KeFc3jFxnNbEPas60e1cIfevbtuyf9nDGIzOaW9PdnDciJm+wFFaTlj5xYw==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "LGPL-3.0-or-later",
			"optional": true,
			"os": [
				"linux"
			],
			"funding": {
				"url": "https://opencollective.com/libvips"
			}
		},
		"node_modules/@img/sharp-libvips-linuxmusl-arm64": {
			"version": "1.0.4",
			"resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-arm64/-/sharp-libvips-linuxmusl-arm64-1.0.4.tgz",
			"integrity": "sha512-9Ti+BbTYDcsbp4wfYib8Ctm1ilkugkA/uscUn6UXK1ldpC1JjiXbLfFZtRlBhjPZ5o1NCLiDbg8fhUPKStHoTA==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "LGPL-3.0-or-later",
			"optional": true,
			"os": [
				"linux"
			],
			"funding": {
				"url": "https://opencollective.com/libvips"
			}
		},
		"node_modules/@img/sharp-libvips-linuxmusl-x64": {
			"version": "1.0.4",
			"resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-x64/-/sharp-libvips-linuxmusl-x64-1.0.4.tgz",
			"integrity": "sha512-viYN1KX9m+/hGkJtvYYp+CCLgnJXwiQB39damAO7WMdKWlIhmYTfHjwSbQeUK/20vY154mwezd9HflVFM1wVSw==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "LGPL-3.0-or-later",
			"optional": true,
			"os": [
				"linux"
			],
			"funding": {
				"url": "https://opencollective.com/libvips"
			}
		},
		"node_modules/@img/sharp-linux-arm": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-linux-arm/-/sharp-linux-arm-0.33.5.tgz",
			"integrity": "sha512-JTS1eldqZbJxjvKaAkxhZmBqPRGmxgu+qFKSInv8moZ2AmT5Yib3EQ1c6gp493HvrvV8QgdOXdyaIBrhvFhBMQ==",
			"cpu": [
				"arm"
			],
			"dev": true,
			"license": "Apache-2.0",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			},
			"optionalDependencies": {
				"@img/sharp-libvips-linux-arm": "1.0.5"
			}
		},
		"node_modules/@img/sharp-linux-arm64": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-linux-arm64/-/sharp-linux-arm64-0.33.5.tgz",
			"integrity": "sha512-JMVv+AMRyGOHtO1RFBiJy/MBsgz0x4AWrT6QoEVVTyh1E39TrCUpTRI7mx9VksGX4awWASxqCYLCV4wBZHAYxA==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "Apache-2.0",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			},
			"optionalDependencies": {
				"@img/sharp-libvips-linux-arm64": "1.0.4"
			}
		},
		"node_modules/@img/sharp-linux-s390x": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-linux-s390x/-/sharp-linux-s390x-0.33.5.tgz",
			"integrity": "sha512-y/5PCd+mP4CA/sPDKl2961b+C9d+vPAveS33s6Z3zfASk2j5upL6fXVPZi7ztePZ5CuH+1kW8JtvxgbuXHRa4Q==",
			"cpu": [
				"s390x"
			],
			"dev": true,
			"license": "Apache-2.0",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			},
			"optionalDependencies": {
				"@img/sharp-libvips-linux-s390x": "1.0.4"
			}
		},
		"node_modules/@img/sharp-linux-x64": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-linux-x64/-/sharp-linux-x64-0.33.5.tgz",
			"integrity": "sha512-opC+Ok5pRNAzuvq1AG0ar+1owsu842/Ab+4qvU879ippJBHvyY5n2mxF1izXqkPYlGuP/M556uh53jRLJmzTWA==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "Apache-2.0",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			},
			"optionalDependencies": {
				"@img/sharp-libvips-linux-x64": "1.0.4"
			}
		},
		"node_modules/@img/sharp-linuxmusl-arm64": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-arm64/-/sharp-linuxmusl-arm64-0.33.5.tgz",
			"integrity": "sha512-XrHMZwGQGvJg2V/oRSUfSAfjfPxO+4DkiRh6p2AFjLQztWUuY/o8Mq0eMQVIY7HJ1CDQUJlxGGZRw1a5bqmd1g==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"license": "Apache-2.0",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			},
			"optionalDependencies": {
				"@img/sharp-libvips-linuxmusl-arm64": "1.0.4"
			}
		},
		"node_modules/@img/sharp-linuxmusl-x64": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-x64/-/sharp-linuxmusl-x64-0.33.5.tgz",
			"integrity": "sha512-WT+d/cgqKkkKySYmqoZ8y3pxx7lx9vVejxW/W4DOFMYVSkErR+w7mf2u8m/y4+xHe7yY9DAXQMWQhpnMuFfScw==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "Apache-2.0",
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			},
			"optionalDependencies": {
				"@img/sharp-libvips-linuxmusl-x64": "1.0.4"
			}
		},
		"node_modules/@img/sharp-wasm32": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-wasm32/-/sharp-wasm32-0.33.5.tgz",
			"integrity": "sha512-ykUW4LVGaMcU9lu9thv85CbRMAwfeadCJHRsg2GmeRa/cJxsVY9Rbd57JcMxBkKHag5U/x7TSBpScF4U8ElVzg==",
			"cpu": [
				"wasm32"
			],
			"dev": true,
			"license": "Apache-2.0 AND LGPL-3.0-or-later AND MIT",
			"optional": true,
			"dependencies": {
				"@emnapi/runtime": "^1.2.0"
			},
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			}
		},
		"node_modules/@img/sharp-win32-ia32": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-win32-ia32/-/sharp-win32-ia32-0.33.5.tgz",
			"integrity": "sha512-T36PblLaTwuVJ/zw/LaH0PdZkRz5rd3SmMHX8GSmR7vtNSP5Z6bQkExdSK7xGWyxLw4sUknBuugTelgw2faBbQ==",
			"cpu": [
				"ia32"
			],
			"dev": true,
			"license": "Apache-2.0 AND LGPL-3.0-or-later",
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			}
		},
		"node_modules/@img/sharp-win32-x64": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-win32-x64/-/sharp-win32-x64-0.33.5.tgz",
			"integrity": "sha512-MpY/o8/8kj+EcnxwvrP4aTJSWw/aZ7JIGR4aBeZkZw5B7/Jn+tY9/VNwtcoGmdT7GfggGIU4kygOMSbYnOrAbg==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"license": "Apache-2.0 AND LGPL-3.0-or-later",
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			}
		},
		"node_modules/@jridgewell/resolve-uri": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
			"integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=6.0.0"
			}
		},
		"node_modules/@jridgewell/sourcemap-codec": {
			"version": "1.5.5",
			"resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.5.tgz",
			"integrity": "sha512-cYQ9310grqxueWbl+WuIUIaiUaDcj7WOq5fVhEljNVgRfOUhY9fy2zTvfoqWsnebh8Sl70VScFbICvJnLKB0Og==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/@jridgewell/trace-mapping": {
			"version": "0.3.9",
			"resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
			"integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@jridgewell/resolve-uri": "^3.0.3",
				"@jridgewell/sourcemap-codec": "^1.4.10"
			}
		},
		"node_modules/@poppinss/colors": {
			"version": "4.1.5",
			"resolved": "https://registry.npmjs.org/@poppinss/colors/-/colors-4.1.5.tgz",
			"integrity": "sha512-FvdDqtcRCtz6hThExcFOgW0cWX+xwSMWcRuQe5ZEb2m7cVQOAVZOIMt+/v9RxGiD9/OY16qJBXK4CVKWAPalBw==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"kleur": "^4.1.5"
			}
		},
		"node_modules/@poppinss/dumper": {
			"version": "0.6.4",
			"resolved": "https://registry.npmjs.org/@poppinss/dumper/-/dumper-0.6.4.tgz",
			"integrity": "sha512-iG0TIdqv8xJ3Lt9O8DrPRxw1MRLjNpoqiSGU03P/wNLP/s0ra0udPJ1J2Tx5M0J3H/cVyEgpbn8xUKRY9j59kQ==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@poppinss/colors": "^4.1.5",
				"@sindresorhus/is": "^7.0.2",
				"supports-color": "^10.0.0"
			}
		},
		"node_modules/@poppinss/exception": {
			"version": "1.2.2",
			"resolved": "https://registry.npmjs.org/@poppinss/exception/-/exception-1.2.2.tgz",
			"integrity": "sha512-m7bpKCD4QMlFCjA/nKTs23fuvoVFoA83brRKmObCUNmi/9tVu8Ve3w4YQAnJu4q3Tjf5fr685HYIC/IA2zHRSg==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/@sindresorhus/is": {
			"version": "7.0.2",
			"resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-7.0.2.tgz",
			"integrity": "sha512-d9xRovfKNz1SKieM0qJdO+PQonjnnIfSNWfHYnBSJ9hkjm0ZPw6HlxscDXYstp3z+7V2GOFHc+J0CYrYTjqCJw==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/sindresorhus/is?sponsor=1"
			}
		},
		"node_modules/@speed-highlight/core": {
			"version": "1.2.7",
			"resolved": "https://registry.npmjs.org/@speed-highlight/core/-/core-1.2.7.tgz",
			"integrity": "sha512-0dxmVj4gxg3Jg879kvFS/msl4s9F3T9UXC1InxgOf7t5NvcPD97u/WTA5vL/IxWHMn7qSxBozqrnnE2wvl1m8g==",
			"dev": true,
			"license": "CC0-1.0"
		},
		"node_modules/acorn": {
			"version": "8.14.0",
			"resolved": "https://registry.npmjs.org/acorn/-/acorn-8.14.0.tgz",
			"integrity": "sha512-cl669nCJTZBsL97OF4kUQm5g5hC2uihk0NxY3WENAC0TYdILVkAyHymAntgxGkl7K+t0cXIrH5siy5S4XkFycA==",
			"dev": true,
			"license": "MIT",
			"bin": {
				"acorn": "bin/acorn"
			},
			"engines": {
				"node": ">=0.4.0"
			}
		},
		"node_modules/acorn-walk": {
			"version": "8.3.2",
			"resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.3.2.tgz",
			"integrity": "sha512-cjkyv4OtNCIeqhHrfS81QWXoCBPExR/J62oyEqepVw8WaQeSqpW2uhuLPh1m9eWhDuOo/jUXVTlifvesOWp/4A==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=0.4.0"
			}
		},
		"node_modules/blake3-wasm": {
			"version": "2.1.5",
			"resolved": "https://registry.npmjs.org/blake3-wasm/-/blake3-wasm-2.1.5.tgz",
			"integrity": "sha512-F1+K8EbfOZE49dtoPtmxUQrpXaBIl3ICvasLh+nJta0xkz+9kF/7uet9fLnwKqhDrmj6g+6K3Tw9yQPUg2ka5g==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/color": {
			"version": "4.2.3",
			"resolved": "https://registry.npmjs.org/color/-/color-4.2.3.tgz",
			"integrity": "sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"color-convert": "^2.0.1",
				"color-string": "^1.9.0"
			},
			"engines": {
				"node": ">=12.5.0"
			}
		},
		"node_modules/color-convert": {
			"version": "2.0.1",
			"resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
			"integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"color-name": "~1.1.4"
			},
			"engines": {
				"node": ">=7.0.0"
			}
		},
		"node_modules/color-name": {
			"version": "1.1.4",
			"resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
			"integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/color-string": {
			"version": "1.9.1",
			"resolved": "https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz",
			"integrity": "sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"color-name": "^1.0.0",
				"simple-swizzle": "^0.2.2"
			}
		},
		"node_modules/cookie": {
			"version": "1.0.2",
			"resolved": "https://registry.npmjs.org/cookie/-/cookie-1.0.2.tgz",
			"integrity": "sha512-9Kr/j4O16ISv8zBBhJoi4bXOYNTkFLOqSL3UDB0njXxCXNezjeyVrJyGOWtgfs/q2km1gwBcfH8q1yEGoMYunA==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/defu": {
			"version": "6.1.4",
			"resolved": "https://registry.npmjs.org/defu/-/defu-6.1.4.tgz",
			"integrity": "sha512-mEQCMmwJu317oSz8CwdIOdwf3xMif1ttiM8LTufzc3g6kR+9Pe236twL8j3IYT1F7GfRgGcW6MWxzZjLIkuHIg==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/detect-libc": {
			"version": "2.0.4",
			"resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.4.tgz",
			"integrity": "sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==",
			"dev": true,
			"license": "Apache-2.0",
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/error-stack-parser-es": {
			"version": "1.0.5",
			"resolved": "https://registry.npmjs.org/error-stack-parser-es/-/error-stack-parser-es-1.0.5.tgz",
			"integrity": "sha512-5qucVt2XcuGMcEGgWI7i+yZpmpByQ8J1lHhcL7PwqCwu9FPP3VUXzT4ltHe5i2z9dePwEHcDVOAfSnHsOlCXRA==",
			"dev": true,
			"license": "MIT",
			"funding": {
				"url": "https://github.com/sponsors/antfu"
			}
		},
		"node_modules/esbuild": {
			"version": "0.25.4",
			"resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.4.tgz",
			"integrity": "sha512-8pgjLUcUjcgDg+2Q4NYXnPbo/vncAY4UmyaCm0jZevERqCHZIaWwdJHkf8XQtu4AxSKCdvrUbT0XUr1IdZzI8Q==",
			"dev": true,
			"hasInstallScript": true,
			"license": "MIT",
			"bin": {
				"esbuild": "bin/esbuild"
			},
			"engines": {
				"node": ">=18"
			},
			"optionalDependencies": {
				"@esbuild/aix-ppc64": "0.25.4",
				"@esbuild/android-arm": "0.25.4",
				"@esbuild/android-arm64": "0.25.4",
				"@esbuild/android-x64": "0.25.4",
				"@esbuild/darwin-arm64": "0.25.4",
				"@esbuild/darwin-x64": "0.25.4",
				"@esbuild/freebsd-arm64": "0.25.4",
				"@esbuild/freebsd-x64": "0.25.4",
				"@esbuild/linux-arm": "0.25.4",
				"@esbuild/linux-arm64": "0.25.4",
				"@esbuild/linux-ia32": "0.25.4",
				"@esbuild/linux-loong64": "0.25.4",
				"@esbuild/linux-mips64el": "0.25.4",
				"@esbuild/linux-ppc64": "0.25.4",
				"@esbuild/linux-riscv64": "0.25.4",
				"@esbuild/linux-s390x": "0.25.4",
				"@esbuild/linux-x64": "0.25.4",
				"@esbuild/netbsd-arm64": "0.25.4",
				"@esbuild/netbsd-x64": "0.25.4",
				"@esbuild/openbsd-arm64": "0.25.4",
				"@esbuild/openbsd-x64": "0.25.4",
				"@esbuild/sunos-x64": "0.25.4",
				"@esbuild/win32-arm64": "0.25.4",
				"@esbuild/win32-ia32": "0.25.4",
				"@esbuild/win32-x64": "0.25.4"
			}
		},
		"node_modules/exit-hook": {
			"version": "2.2.1",
			"resolved": "https://registry.npmjs.org/exit-hook/-/exit-hook-2.2.1.tgz",
			"integrity": "sha512-eNTPlAD67BmP31LDINZ3U7HSF8l57TxOY2PmBJ1shpCvpnxBF93mWCE8YHBnXs8qiUZJc9WDcWIeC3a2HIAMfw==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=6"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/exsolve": {
			"version": "1.0.7",
			"resolved": "https://registry.npmjs.org/exsolve/-/exsolve-1.0.7.tgz",
			"integrity": "sha512-VO5fQUzZtI6C+vx4w/4BWJpg3s/5l+6pRQEHzFRM8WFi4XffSP1Z+4qi7GbjWbvRQEbdIco5mIMq+zX4rPuLrw==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/fsevents": {
			"version": "2.3.3",
			"resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
			"integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
			"dev": true,
			"hasInstallScript": true,
			"license": "MIT",
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": "^8.16.0 || ^10.6.0 || >=11.0.0"
			}
		},
		"node_modules/glob-to-regexp": {
			"version": "0.4.1",
			"resolved": "https://registry.npmjs.org/glob-to-regexp/-/glob-to-regexp-0.4.1.tgz",
			"integrity": "sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==",
			"dev": true,
			"license": "BSD-2-Clause"
		},
		"node_modules/is-arrayish": {
			"version": "0.3.2",
			"resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz",
			"integrity": "sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/kleur": {
			"version": "4.1.5",
			"resolved": "https://registry.npmjs.org/kleur/-/kleur-4.1.5.tgz",
			"integrity": "sha512-o+NO+8WrRiQEE4/7nwRJhN1HWpVmJm511pBHUxPLtp0BUISzlBplORYSmTclCnJvQq2tKu/sgl3xVpkc7ZWuQQ==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/mime": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/mime/-/mime-3.0.0.tgz",
			"integrity": "sha512-jSCU7/VB1loIWBZe14aEYHU/+1UMEHoaO7qxCOVJOw9GgH72VAWppxNcjU+x9a2k3GSIBXNKxXQFqRvvZ7vr3A==",
			"dev": true,
			"license": "MIT",
			"bin": {
				"mime": "cli.js"
			},
			"engines": {
				"node": ">=10.0.0"
			}
		},
		"node_modules/miniflare": {
			"version": "4.20250816.1",
			"resolved": "https://registry.npmjs.org/miniflare/-/miniflare-4.20250816.1.tgz",
			"integrity": "sha512-2X8yMy5wWw0dF1pNU4kztzZgp0jWv2KMqAOOb2FeQ/b11yck4aczmYHi7UYD3uyOgtj8WFhwG/KdRWAaATTtRA==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@cspotcode/source-map-support": "0.8.1",
				"acorn": "8.14.0",
				"acorn-walk": "8.3.2",
				"exit-hook": "2.2.1",
				"glob-to-regexp": "0.4.1",
				"sharp": "^0.33.5",
				"stoppable": "1.1.0",
				"undici": "^7.10.0",
				"workerd": "1.20250816.0",
				"ws": "8.18.0",
				"youch": "4.1.0-beta.10",
				"zod": "3.22.3"
			},
			"bin": {
				"miniflare": "bootstrap.js"
			},
			"engines": {
				"node": ">=18.0.0"
			}
		},
		"node_modules/ohash": {
			"version": "2.0.11",
			"resolved": "https://registry.npmjs.org/ohash/-/ohash-2.0.11.tgz",
			"integrity": "sha512-RdR9FQrFwNBNXAr4GixM8YaRZRJ5PUWbKYbE5eOsrwAjJW0q2REGcf79oYPsLyskQCZG1PLN+S/K1V00joZAoQ==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/path-to-regexp": {
			"version": "6.3.0",
			"resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-6.3.0.tgz",
			"integrity": "sha512-Yhpw4T9C6hPpgPeA28us07OJeqZ5EzQTkbfwuhsUg0c237RomFoETJgmp2sa3F/41gfLE6G5cqcYwznmeEeOlQ==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/pathe": {
			"version": "2.0.3",
			"resolved": "https://registry.npmjs.org/pathe/-/pathe-2.0.3.tgz",
			"integrity": "sha512-WUjGcAqP1gQacoQe+OBJsFA7Ld4DyXuUIjZ5cc75cLHvJ7dtNsTugphxIADwspS+AraAUePCKrSVtPLFj/F88w==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/semver": {
			"version": "7.7.2",
			"resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
			"integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
			"dev": true,
			"license": "ISC",
			"bin": {
				"semver": "bin/semver.js"
			},
			"engines": {
				"node": ">=10"
			}
		},
		"node_modules/sharp": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/sharp/-/sharp-0.33.5.tgz",
			"integrity": "sha512-haPVm1EkS9pgvHrQ/F3Xy+hgcuMV0Wm9vfIBSiwZ05k+xgb0PkBQpGsAA/oWdDobNaZTH5ppvHtzCFbnSEwHVw==",
			"dev": true,
			"hasInstallScript": true,
			"license": "Apache-2.0",
			"dependencies": {
				"color": "^4.2.3",
				"detect-libc": "^2.0.3",
				"semver": "^7.6.3"
			},
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			},
			"optionalDependencies": {
				"@img/sharp-darwin-arm64": "0.33.5",
				"@img/sharp-darwin-x64": "0.33.5",
				"@img/sharp-libvips-darwin-arm64": "1.0.4",
				"@img/sharp-libvips-darwin-x64": "1.0.4",
				"@img/sharp-libvips-linux-arm": "1.0.5",
				"@img/sharp-libvips-linux-arm64": "1.0.4",
				"@img/sharp-libvips-linux-s390x": "1.0.4",
				"@img/sharp-libvips-linux-x64": "1.0.4",
				"@img/sharp-libvips-linuxmusl-arm64": "1.0.4",
				"@img/sharp-libvips-linuxmusl-x64": "1.0.4",
				"@img/sharp-linux-arm": "0.33.5",
				"@img/sharp-linux-arm64": "0.33.5",
				"@img/sharp-linux-s390x": "0.33.5",
				"@img/sharp-linux-x64": "0.33.5",
				"@img/sharp-linuxmusl-arm64": "0.33.5",
				"@img/sharp-linuxmusl-x64": "0.33.5",
				"@img/sharp-wasm32": "0.33.5",
				"@img/sharp-win32-ia32": "0.33.5",
				"@img/sharp-win32-x64": "0.33.5"
			}
		},
		"node_modules/simple-swizzle": {
			"version": "0.2.2",
			"resolved": "https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz",
			"integrity": "sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"is-arrayish": "^0.3.1"
			}
		},
		"node_modules/stoppable": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/stoppable/-/stoppable-1.1.0.tgz",
			"integrity": "sha512-KXDYZ9dszj6bzvnEMRYvxgeTHU74QBFL54XKtP3nyMuJ81CFYtABZ3bAzL2EdFUaEwJOBOgENyFj3R7oTzDyyw==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=4",
				"npm": ">=6"
			}
		},
		"node_modules/supports-color": {
			"version": "10.2.0",
			"resolved": "https://registry.npmjs.org/supports-color/-/supports-color-10.2.0.tgz",
			"integrity": "sha512-5eG9FQjEjDbAlI5+kdpdyPIBMRH4GfTVDGREVupaZHmVoppknhM29b/S9BkQz7cathp85BVgRi/As3Siln7e0Q==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/chalk/supports-color?sponsor=1"
			}
		},
		"node_modules/tslib": {
			"version": "2.8.1",
			"resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
			"integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
			"dev": true,
			"license": "0BSD",
			"optional": true
		},
		"node_modules/ufo": {
			"version": "1.6.1",
			"resolved": "https://registry.npmjs.org/ufo/-/ufo-1.6.1.tgz",
			"integrity": "sha512-9a4/uxlTWJ4+a5i0ooc1rU7C7YOw3wT+UGqdeNNHWnOF9qcMBgLRS+4IYUqbczewFx4mLEig6gawh7X6mFlEkA==",
			"dev": true,
			"license": "MIT"
		},
		"node_modules/undici": {
			"version": "7.14.0",
			"resolved": "https://registry.npmjs.org/undici/-/undici-7.14.0.tgz",
			"integrity": "sha512-Vqs8HTzjpQXZeXdpsfChQTlafcMQaaIwnGwLam1wudSSjlJeQ3bw1j+TLPePgrCnCpUXx7Ba5Pdpf5OBih62NQ==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=20.18.1"
			}
		},
		"node_modules/unenv": {
			"version": "2.0.0-rc.19",
			"resolved": "https://registry.npmjs.org/unenv/-/unenv-2.0.0-rc.19.tgz",
			"integrity": "sha512-t/OMHBNAkknVCI7bVB9OWjUUAwhVv9vsPIAGnNUxnu3FxPQN11rjh0sksLMzc3g7IlTgvHmOTl4JM7JHpcv5wA==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"defu": "^6.1.4",
				"exsolve": "^1.0.7",
				"ohash": "^2.0.11",
				"pathe": "^2.0.3",
				"ufo": "^1.6.1"
			}
		},
		"node_modules/workerd": {
			"version": "1.20250816.0",
			"resolved": "https://registry.npmjs.org/workerd/-/workerd-1.20250816.0.tgz",
			"integrity": "sha512-5gIvHPE/3QVlQR1Sc1NdBkWmqWj/TSgIbY/f/qs9lhiLBw/Da+HbNBTVYGjvwYqEb3NQ+XQM4gAm5b2+JJaUJg==",
			"dev": true,
			"hasInstallScript": true,
			"license": "Apache-2.0",
			"bin": {
				"workerd": "bin/workerd"
			},
			"engines": {
				"node": ">=16"
			},
			"optionalDependencies": {
				"@cloudflare/workerd-darwin-64": "1.20250816.0",
				"@cloudflare/workerd-darwin-arm64": "1.20250816.0",
				"@cloudflare/workerd-linux-64": "1.20250816.0",
				"@cloudflare/workerd-linux-arm64": "1.20250816.0",
				"@cloudflare/workerd-windows-64": "1.20250816.0"
			}
		},
		"node_modules/wrangler": {
			"version": "4.32.0",
			"resolved": "https://registry.npmjs.org/wrangler/-/wrangler-4.32.0.tgz",
			"integrity": "sha512-q7TRSavBW3Eg3pp4rxqKJwSK+u/ieFOBdNvUsq1P1EMmyj3//tN/iXDokFak+dkW0vDYjsVG3PfOfHxU92OS6w==",
			"dev": true,
			"license": "MIT OR Apache-2.0",
			"dependencies": {
				"@cloudflare/kv-asset-handler": "0.4.0",
				"@cloudflare/unenv-preset": "2.6.2",
				"blake3-wasm": "2.1.5",
				"esbuild": "0.25.4",
				"miniflare": "4.20250816.1",
				"path-to-regexp": "6.3.0",
				"unenv": "2.0.0-rc.19",
				"workerd": "1.20250816.0"
			},
			"bin": {
				"wrangler": "bin/wrangler.js",
				"wrangler2": "bin/wrangler.js"
			},
			"engines": {
				"node": ">=18.0.0"
			},
			"optionalDependencies": {
				"fsevents": "~2.3.2"
			},
			"peerDependencies": {
				"@cloudflare/workers-types": "^4.20250816.0"
			},
			"peerDependenciesMeta": {
				"@cloudflare/workers-types": {
					"optional": true
				}
			}
		},
		"node_modules/ws": {
			"version": "8.18.0",
			"resolved": "https://registry.npmjs.org/ws/-/ws-8.18.0.tgz",
			"integrity": "sha512-8VbfWfHLbbwu3+N6OKsOMpBdT4kXPDDB9cJk2bJ6mh9ucxdlnNvH1e+roYkKmN9Nxw2yjz7VzeO9oOz2zJ04Pw==",
			"dev": true,
			"license": "MIT",
			"engines": {
				"node": ">=10.0.0"
			},
			"peerDependencies": {
				"bufferutil": "^4.0.1",
				"utf-8-validate": ">=5.0.2"
			},
			"peerDependenciesMeta": {
				"bufferutil": {
					"optional": true
				},
				"utf-8-validate": {
					"optional": true
				}
			}
		},
		"node_modules/youch": {
			"version": "4.1.0-beta.10",
			"resolved": "https://registry.npmjs.org/youch/-/youch-4.1.0-beta.10.tgz",
			"integrity": "sha512-rLfVLB4FgQneDr0dv1oddCVZmKjcJ6yX6mS4pU82Mq/Dt9a3cLZQ62pDBL4AUO+uVrCvtWz3ZFUL2HFAFJ/BXQ==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@poppinss/colors": "^4.1.5",
				"@poppinss/dumper": "^0.6.4",
				"@speed-highlight/core": "^1.2.7",
				"cookie": "^1.0.2",
				"youch-core": "^0.3.3"
			}
		},
		"node_modules/youch-core": {
			"version": "0.3.3",
			"resolved": "https://registry.npmjs.org/youch-core/-/youch-core-0.3.3.tgz",
			"integrity": "sha512-ho7XuGjLaJ2hWHoK8yFnsUGy2Y5uDpqSTq1FkHLK4/oqKtyUU1AFbOOxY4IpC9f0fTLjwYbslUz0Po5BpD1wrA==",
			"dev": true,
			"license": "MIT",
			"dependencies": {
				"@poppinss/exception": "^1.2.2",
				"error-stack-parser-es": "^1.0.5"
			}
		},
		"node_modules/zod": {
			"version": "3.22.3",
			"resolved": "https://registry.npmjs.org/zod/-/zod-3.22.3.tgz",
			"integrity": "sha512-EjIevzuJRiRPbVH4mGc8nApb/lVLKVpmUhAaR5R5doKGfAnGJ6Gr3CViAVjP+4FWSxCsybeWQdcgCtbX+7oZug==",
			"dev": true,
			"license": "MIT",
			"funding": {
				"url": "https://github.com/sponsors/colinhacks"
			}
		}
	}
}

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\package-lock.json ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\package.json:
{
	"name": "twilight-cell-b373",
	"version": "0.0.0",
	"private": true,
	"scripts": {
		"deploy": "wrangler deploy",
		"dev": "wrangler dev",
		"start": "wrangler dev"
	},
	"devDependencies": {
		"wrangler": "^4.32.0"
	},
	"dependencies": {
		"@cloudflare/containers": "^0.0.26"
	}
}

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\package.json ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\pyproject.toml:
[project]
name = "twilight-cell-b373"
version = "0.1.0"
description = "Marimo notebook running on Cloudflare Containers"
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "marimo>=0.11.0,<0.14.0",
    "webtypy>=0.1.7",
]

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\pyproject.toml ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\README.md:
## Usage

You can run the Worker defined by your new project by executing `wrangler dev` in this
directory. This will start up an HTTP server and will allow you to iterate on your
Worker without having to restart `wrangler`.

### Types and autocomplete

This project also includes a pyproject.toml and uv.lock file with some requirements which
set up autocomplete and type hints for this Python Workers project.

To get these installed you'll need `uv`, which you can install by following
https://docs.astral.sh/uv/getting-started/installation/.

Once `uv` is installed, you can run the following:

```
uv venv
uv sync
```

Then point your editor's Python plugin at the `.venv` directory. You should then have working
autocomplete and type information in your editor.

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\README.md ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\requirements.txt:
marimo==0.12.0
# plus your libs, e.g. pandas, altair, etc.

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\requirements.txt ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\start_marimo.py:
#!/usr/bin/env python3
"""
Startup script for Marimo in Cloudflare Containers
This approach is more robust and future-proof than static Docker CMD
"""

import os
import sys
import subprocess
import time
from pathlib import Path

# Immediate debug output
print("üî• CONTAINER STARTING - Python script loaded!")
print(f"üî• Python executable: {sys.executable}")
print(f"üî• Python path: {sys.path}")
sys.stdout.flush()

def create_notebook():
    """Create a fresh notebook file"""
    notebooks_dir = Path("/app/notebooks")
    notebooks_dir.mkdir(exist_ok=True)
    
    notebook_path = notebooks_dir / "workspace.py"
    
    # Create a proper Marimo notebook with simpler content
    content = """import marimo as mo

# Initialize the Marimo app
app = mo.App()

@app.cell
def __():
    return "Notebook is ready!"

@app.cell
def __():
    return 42
"""
    
    # Write with explicit encoding and ensure proper line endings
    with open(notebook_path, 'w', encoding='utf-8', newline='\n') as f:
        f.write(content)
    
    # Verify the file was written correctly
    with open(notebook_path, 'r', encoding='utf-8') as f:
        actual_content = f.read()
        print(f"üìù File content preview: {actual_content[:100]}...")
    
    print(f"‚úÖ Created notebook: {notebook_path}")
    return notebook_path

def start_marimo(notebook_path):
    """Start Marimo with the notebook using modern 0.11-0.13 flags"""
    print("üöÄ Starting Marimo...")
    
    # Get Marimo version to confirm we're running 0.11+
    try:
        version_result = subprocess.run(
            ["python", "-m", "marimo", "--version"],
            capture_output=True,
            text=True,
            timeout=10
        )
        marimo_version = version_result.stdout.strip()
        print(f"üì¶ Marimo version: {marimo_version}")
        
        # Check if version is 0.11+
        if marimo_version and marimo_version.startswith(('0.11', '0.12', '0.13')):
            print("‚úÖ Marimo version is compatible (0.11-0.13)")
        else:
            print("‚ö†Ô∏è  Marimo version may not be fully compatible")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Could not determine Marimo version: {e}")
        marimo_version = "unknown"
    
    # Modern Marimo 0.11-0.13 flags
    # Using --no-token for public access (behind your reverse proxy)
    cmd = [
        "python", "-m", "marimo", "edit",
        "--host", "0.0.0.0",
        "--port", "2718",
        "--headless",
        "--no-token",
        "--skip-update-check",
        str(notebook_path)
    ]
    
    try:
        print(f"üìù Starting Marimo with command: {' '.join(cmd)}")
        
        # Start Marimo
        process = subprocess.Popen(cmd)
        print(f"‚úÖ Marimo started with PID: {process.pid}")
        
        # Wait to see if it starts successfully
        time.sleep(5)
        
        if process.poll() is None:
            print(f"üéâ Marimo is running successfully!")
            return process
        else:
            stdout, stderr = process.communicate()
            print(f"‚ùå Marimo failed to start:")
            if stdout: print(f"STDOUT: {stdout.decode()}")
            if stderr: print(f"STDERR: {stderr.decode()}")
            raise RuntimeError("Marimo process exited unexpectedly")
            
    except Exception as e:
        print(f"‚ùå Error starting Marimo: {e}")
        raise

def main():
    """Main startup function"""
    print("üöÄ Starting Marimo Container...")
    print(f"üêç Python version: {sys.version}")
    print(f"üìÅ Working directory: {os.getcwd()}")
    print("=" * 50)
    
    try:
        # Create the notebook
        print("üìù Creating notebook...")
        notebook_path = create_notebook()
        
        # Start Marimo
        print("üöÄ Starting Marimo server...")
        process = start_marimo(notebook_path)
        
        print("=" * 50)
        print("üéâ Marimo is now running!")
        print(f"üåê Access your notebook at: http://localhost:2718")
        print(f"üìä Process ID: {process.pid}")
        print("=" * 50)
        
        # Keep container alive and monitor process
        while True:
            if process.poll() is not None:
                print("‚ùå Marimo process died unexpectedly!")
                return 1
            
            # Health check every 30 seconds
            time.sleep(30)
            print("üíì Health check: Marimo is running...")
        
    except KeyboardInterrupt:
        print("\nüõë Received interrupt signal, shutting down...")
        if 'process' in locals():
            process.terminate()
            process.wait()
        return 0
        
    except Exception as e:
        print(f"‚ùå Startup failed: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0

def start_simple_server():
    """Start a simple HTTP server for testing"""
    import http.server
    import socketserver
    
    print("üö® Starting simple HTTP server as fallback...")
    
    class SimpleHandler(http.server.SimpleHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(b'<h1>Container is running! Marimo failed to start.</h1>')
    
    try:
        with socketserver.TCPServer(("0.0.0.0", 2718), SimpleHandler) as httpd:
            print("üåê Simple server running on http://0.0.0.0:2718")
            httpd.serve_forever()
    except Exception as e:
        print(f"‚ùå Even simple server failed: {e}")
        return 1

if __name__ == "__main__":
    try:
        exit(main())
    except Exception as e:
        print(f"‚ùå Main function failed: {e}")
        print("üö® Falling back to simple server...")
        exit(start_simple_server())

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\start_marimo.py ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\test_minimal.py:




--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\test_minimal.py ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\test_notebook_creation.py:
#!/usr/bin/env python3
"""
Test script to verify notebook creation functionality
Run this locally to test: python test_notebook_creation.py
"""

import sys
from pathlib import Path

# Add src to path for testing
sys.path.insert(0, str(Path(__file__).parent / "src"))

from start_marimo import create_new_notebook

def test_notebook_creation():
    """Test notebook creation locally"""
    print("üß™ Testing notebook creation...")
    
    # Create test notebooks directory
    test_dir = Path("./test_notebooks")
    test_dir.mkdir(exist_ok=True)
    
    # Test timestamped notebook creation
    print("\nüìù Testing timestamped notebook creation...")
    notebook1 = create_new_notebook(test_dir, use_timestamp=True)
    print(f"‚úÖ Created: {notebook1.name}")
    
    # Test fixed name notebook creation
    print("\nüìù Testing fixed name notebook creation...")
    notebook2 = create_new_notebook(test_dir, use_timestamp=False)
    print(f"‚úÖ Created: {notebook2.name}")
    
    # Verify files exist
    print(f"\nüìÅ Files in {test_dir}:")
    for file in test_dir.glob("*.py"):
        print(f"  - {file.name}")
    
    # Clean up test files
    print("\nüßπ Cleaning up test files...")
    for file in test_dir.glob("*.py"):
        file.unlink()
    test_dir.rmdir()
    
    print("‚úÖ Test completed successfully!")

if __name__ == "__main__":
    test_notebook_creation()

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\test_notebook_creation.py ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\test_simple.py:
#!/usr/bin/env python3
"""
Minimal test script to verify container basics
"""

import http.server
import socketserver
import sys

print("üî• MINIMAL TEST CONTAINER STARTING!")
print(f"üî• Python version: {sys.version}")
sys.stdout.flush()

class TestHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        response = f"""
        <h1>‚úÖ Container is Working!</h1>
        <p>Python version: {sys.version}</p>
        <p>Time: {__import__('time').ctime()}</p>
        """
        self.wfile.write(response.encode())

print("üåê Starting test server on port 2718...")
with socketserver.TCPServer(("0.0.0.0", 2718), TestHandler) as httpd:
    print("‚úÖ Test server is running!")
    sys.stdout.flush()
    httpd.serve_forever()

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\test_simple.py ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\uv.lock:
version = 1
requires-python = ">=3.12"

[[package]]
name = "<TBD>"
version = "0.1.0"
source = { virtual = "." }
dependencies = [
    { name = "webtypy" },
]

[package.metadata]
requires-dist = [{ name = "webtypy", specifier = ">=0.1.7" }]

[[package]]
name = "webtypy"
version = "0.1.7"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/5e/89/c7a0311fdc73809fc2415be97767f085ff3e00c86546430034dc8465fee7/webtypy-0.1.7.tar.gz", hash = "sha256:1b7212719a949c802f3d60fac5f0d952eb503a92121409cf1ad9847d7c76a336", size = 104505 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/61/91/c731bdaa605279e00b28bfd2bf0ae67f48061d16890fb1c026924bfbd242/webtypy-0.1.7-py3-none-any.whl", hash = "sha256:f35e6d73a4e08783e23adfac271a11cda3a2bd1105499db70e4819244efed0ae", size = 103519 },
]

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\uv.lock ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\workspace.py:
import marimo as mo

# Initialize the Marimo app
app = mo.App()

@app.cell
def __():
    """Welcome to Marimo Notebook!"""
    mo.md("""
    # Marimo Notebook üöÄ
    
    This notebook is running on Cloudflare Containers.
    Each session gets a clean workspace for coding.
    """)
    return "Notebook is ready!"

@app.cell
def __():
    """Sample data generation"""
    import numpy as np
    data = np.random.randn(100)
    return data

@app.cell
def __():
    """Interactive elements"""
    slider = mo.ui.slider(0, 100, value=50, label="Value")
    return slider

@app.cell
def __():
    """Display the slider value"""
    slider_value = slider.value
    mo.md(f"**Slider value:** {slider_value}")
    return slider_value

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\workspace.py ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\wrangler.jsonc:
{
  "name": "twilight-cell-b373",
  "main": "src/index.ts",
  "compatibility_date": "2025-08-22",
  "observability": { "enabled": true },
  "durable_objects": {
    "bindings": [{ "name": "MARIMO", "class_name": "MarimoContainer" }]
  },
  "migrations": [
    {
      "tag": "v3",
      "new_classes": [
        "MarimoContainer"
      ]
    }
  ],
  "containers": [
    {
      "class_name": "MarimoContainer",
      "image": "./Dockerfile",
      "max_instances": 10
    }
  ]
}
--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\wrangler.jsonc ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\.vscode\settings.json:
{
	"files.associations": {
		"wrangler.json": "jsonc"
	}
}
--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\.vscode\settings.json ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\.wrangler\tmp\deploy-5KPDdP\index.js:
var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// node_modules/@cloudflare/containers/dist/lib/helpers.js
function generateId(length = 9) {
  const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  const bytes = new Uint8Array(length);
  crypto.getRandomValues(bytes);
  let result = "";
  for (let i = 0; i < length; i++) {
    result += alphabet[bytes[i] % alphabet.length];
  }
  return result;
}
__name(generateId, "generateId");
function parseTimeExpression(timeExpression) {
  if (typeof timeExpression === "number") {
    return timeExpression;
  }
  if (typeof timeExpression === "string") {
    const match = timeExpression.match(/^(\d+)([smh])$/);
    if (!match) {
      throw new Error(`invalid time expression ${timeExpression}`);
    }
    const value = parseInt(match[1]);
    const unit = match[2];
    switch (unit) {
      case "s":
        return value;
      case "m":
        return value * 60;
      case "h":
        return value * 60 * 60;
      default:
        throw new Error(`unknown time unit ${unit}`);
    }
  }
  throw new Error(`invalid type for a time expression: ${typeof timeExpression}`);
}
__name(parseTimeExpression, "parseTimeExpression");

// node_modules/@cloudflare/containers/dist/lib/container.js
import { DurableObject } from "cloudflare:workers";
var NO_CONTAINER_INSTANCE_ERROR = "there is no container instance that can be provided to this durable object";
var RUNTIME_SIGNALLED_ERROR = "runtime signalled the container to exit:";
var UNEXPECTED_EXIT_ERROR = "container exited with unexpected exit code:";
var NOT_LISTENING_ERROR = "the container is not listening";
var CONTAINER_STATE_KEY = "__CF_CONTAINER_STATE";
var MAX_ALARM_RETRIES = 3;
var PING_TIMEOUT_MS = 5e3;
var DEFAULT_SLEEP_AFTER = "10m";
var INSTANCE_POLL_INTERVAL_MS = 300;
var TIMEOUT_TO_GET_CONTAINER_SECONDS = 8;
var TIMEOUT_TO_GET_PORTS = 20;
var TRIES_TO_GET_CONTAINER = Math.ceil(TIMEOUT_TO_GET_CONTAINER_SECONDS * 1e3 / INSTANCE_POLL_INTERVAL_MS);
var TRIES_TO_GET_PORTS = Math.ceil(TIMEOUT_TO_GET_PORTS * 1e3 / INSTANCE_POLL_INTERVAL_MS);
var FALLBACK_PORT_TO_CHECK = 33;
var TEMPORARY_HARDCODED_ATTEMPT_MAX = 6;
var signalToNumbers = {
  SIGINT: 2,
  SIGTERM: 15,
  SIGKILL: 9
};
function isErrorOfType(e, matchingString) {
  const errorString = e instanceof Error ? e.message : String(e);
  return errorString.toLowerCase().includes(matchingString);
}
__name(isErrorOfType, "isErrorOfType");
var isNoInstanceError = /* @__PURE__ */ __name((error) => isErrorOfType(error, NO_CONTAINER_INSTANCE_ERROR), "isNoInstanceError");
var isRuntimeSignalledError = /* @__PURE__ */ __name((error) => isErrorOfType(error, RUNTIME_SIGNALLED_ERROR), "isRuntimeSignalledError");
var isNotListeningError = /* @__PURE__ */ __name((error) => isErrorOfType(error, NOT_LISTENING_ERROR), "isNotListeningError");
var isContainerExitNonZeroError = /* @__PURE__ */ __name((error) => isErrorOfType(error, UNEXPECTED_EXIT_ERROR), "isContainerExitNonZeroError");
function getExitCodeFromError(error) {
  if (!(error instanceof Error)) {
    return null;
  }
  if (isRuntimeSignalledError(error)) {
    return +error.message.toLowerCase().slice(error.message.toLowerCase().indexOf(RUNTIME_SIGNALLED_ERROR) + RUNTIME_SIGNALLED_ERROR.length + 1);
  }
  if (isContainerExitNonZeroError(error)) {
    return +error.message.toLowerCase().slice(error.message.toLowerCase().indexOf(UNEXPECTED_EXIT_ERROR) + UNEXPECTED_EXIT_ERROR.length + 1);
  }
  return null;
}
__name(getExitCodeFromError, "getExitCodeFromError");
function addTimeoutSignal(existingSignal, timeoutMs) {
  const controller = new AbortController();
  if (existingSignal?.aborted) {
    controller.abort();
    return controller.signal;
  }
  existingSignal?.addEventListener("abort", () => controller.abort());
  const timeoutId = setTimeout(() => controller.abort(), timeoutMs);
  controller.signal.addEventListener("abort", () => clearTimeout(timeoutId));
  return controller.signal;
}
__name(addTimeoutSignal, "addTimeoutSignal");
var ContainerState = class {
  static {
    __name(this, "ContainerState");
  }
  storage;
  status;
  constructor(storage) {
    this.storage = storage;
  }
  async setRunning() {
    await this.setStatusAndupdate("running");
  }
  async setHealthy() {
    await this.setStatusAndupdate("healthy");
  }
  async setStopping() {
    await this.setStatusAndupdate("stopping");
  }
  async setStopped() {
    await this.setStatusAndupdate("stopped");
  }
  async setStoppedWithCode(exitCode) {
    this.status = { status: "stopped_with_code", lastChange: Date.now(), exitCode };
    await this.update();
  }
  async getState() {
    if (!this.status) {
      const state = await this.storage.get(CONTAINER_STATE_KEY);
      if (!state) {
        this.status = {
          status: "stopped",
          lastChange: Date.now()
        };
        await this.update();
      } else {
        this.status = state;
      }
    }
    return this.status;
  }
  async setStatusAndupdate(status) {
    this.status = { status, lastChange: Date.now() };
    await this.update();
  }
  async update() {
    if (!this.status)
      throw new Error("status should be init");
    await this.storage.put(CONTAINER_STATE_KEY, this.status);
  }
};
var Container = class extends DurableObject {
  static {
    __name(this, "Container");
  }
  // =========================
  //     Public Attributes
  // =========================
  // Default port for the container (undefined means no default port)
  defaultPort;
  // Required ports that should be checked for availability during container startup
  // Override this in your subclass to specify ports that must be ready
  requiredPorts;
  // Timeout after which the container will sleep if no activity
  // The signal sent to the container by default is a SIGTERM.
  // The container won't get a SIGKILL if this threshold is triggered.
  sleepAfter = DEFAULT_SLEEP_AFTER;
  // Container configuration properties
  // Set these properties directly in your container instance
  envVars = {};
  entrypoint;
  enableInternet = true;
  // =========================
  //     PUBLIC INTERFACE
  // =========================
  constructor(ctx, env, options) {
    super(ctx, env);
    if (ctx.container === void 0) {
      throw new Error("Containers have not been enabled for this Durable Object class. Have you correctly setup your Wrangler config? More info: https://developers.cloudflare.com/containers/get-started/#configuration");
    }
    this.state = new ContainerState(this.ctx.storage);
    this.ctx.blockConcurrencyWhile(async () => {
      this.renewActivityTimeout();
      await this.scheduleNextAlarm();
    });
    this.container = ctx.container;
    if (options) {
      if (options.defaultPort !== void 0)
        this.defaultPort = options.defaultPort;
      if (options.sleepAfter !== void 0)
        this.sleepAfter = options.sleepAfter;
    }
    this.sql`
      CREATE TABLE IF NOT EXISTS container_schedules (
        id TEXT PRIMARY KEY NOT NULL DEFAULT (randomblob(9)),
        callback TEXT NOT NULL,
        payload TEXT,
        type TEXT NOT NULL CHECK(type IN ('scheduled', 'delayed')),
        time INTEGER NOT NULL,
        delayInSeconds INTEGER,
        created_at INTEGER DEFAULT (unixepoch())
      )
    `;
    if (this.container.running) {
      this.monitor = this.container.monitor();
      this.setupMonitorCallbacks();
    }
  }
  /**
   * Gets the current state of the container
   * @returns Promise<State>
   */
  async getState() {
    return { ...await this.state.getState() };
  }
  // ==========================
  //     CONTAINER STARTING
  // ==========================
  /**
   * Start the container if it's not running and set up monitoring
   *
   * This method handles the core container startup process without waiting for ports to be ready.
   * It will automatically retry if the container fails to start, up to maxTries attempts.
   *
   * It's useful when you need to:
   * - Start a container without blocking until a port is available
   * - Initialize a container that doesn't expose ports
   * - Perform custom port availability checks separately
   *
   * The method applies the container configuration from your instance properties by default, but allows
   * overriding these values for this specific startup:
   * - Environment variables (defaults to this.envVars)
   * - Custom entrypoint commands (defaults to this.entrypoint)
   * - Internet access settings (defaults to this.enableInternet)
   *
   * It also sets up monitoring to track container lifecycle events and automatically
   * calls the onStop handler when the container terminates.
   *
   * @example
   * // Basic usage in a custom Container implementation
   * async customInitialize() {
   *   // Start the container without waiting for a port
   *   await this.start();
   *
   *   // Perform additional initialization steps
   *   // that don't require port access
   * }
   *
   * @example
   * // Start with custom configuration
   * await this.start({
   *   envVars: { DEBUG: 'true', NODE_ENV: 'development' },
   *   entrypoint: ['npm', 'run', 'dev'],
   *   enableInternet: false
   * });
   *
   * @param options - Optional configuration to override instance defaults
   * @param waitOptions - Optional wait configuration with abort signal for cancellation
   * @returns A promise that resolves when the container start command has been issued
   * @throws Error if no container context is available or if all start attempts fail
   */
  async start(options, waitOptions) {
    const portToCheck = this.defaultPort ?? (this.requiredPorts ? this.requiredPorts[0] : FALLBACK_PORT_TO_CHECK);
    await this.startContainerIfNotRunning({
      abort: waitOptions?.signal,
      waitInterval: INSTANCE_POLL_INTERVAL_MS,
      retries: TRIES_TO_GET_CONTAINER,
      portToCheck
    }, options);
    this.setupMonitorCallbacks();
    await this.ctx.blockConcurrencyWhile(async () => {
      await this.onStart();
    });
  }
  /**
   * Start the container and wait for ports to be available
   * Based on containers-starter-go implementation
   *
   * This method builds on start() by adding port availability verification:
   * 1. Calls start() to ensure the container is running
   * 2. If no ports are specified and requiredPorts is not set, it uses defaultPort (if set)
   * 3. If no ports can be determined, it calls onStart and renewActivityTimeout immediately
   * 4. For each specified port, it polls until the port is available or maxTries is reached
   * 5. When all ports are available, it triggers onStart and renewActivityTimeout
   *
   * The method prioritizes port sources in this order:
   * 1. Ports specified directly in the method call
   * 2. requiredPorts class property (if set)
   * 3. defaultPort (if neither of the above is specified)
   *
   * @param ports - The ports to wait for (if undefined, uses requiredPorts or defaultPort)
   * @param maxTries - Maximum number of attempts to connect to each port before failing
   * @throws Error if port checks fail after maxTries attempts
   */
  async startAndWaitForPorts(ports, cancellationOptions) {
    let portsToCheck = [];
    if (ports !== void 0) {
      portsToCheck = Array.isArray(ports) ? ports : [ports];
    } else if (this.requiredPorts && this.requiredPorts.length > 0) {
      portsToCheck = [...this.requiredPorts];
    } else if (this.defaultPort !== void 0) {
      portsToCheck = [this.defaultPort];
    }
    const state = await this.state.getState();
    cancellationOptions ??= {};
    let containerGetRetries = cancellationOptions.instanceGetTimeoutMS ? Math.ceil(cancellationOptions.instanceGetTimeoutMS / INSTANCE_POLL_INTERVAL_MS) : TRIES_TO_GET_CONTAINER;
    cancellationOptions ??= {};
    let totalPortReadyTries = cancellationOptions.portReadyTimeoutMS ? Math.ceil(cancellationOptions.portReadyTimeoutMS / INSTANCE_POLL_INTERVAL_MS) : TRIES_TO_GET_PORTS;
    const options = {
      abort: cancellationOptions.abort,
      retries: containerGetRetries,
      waitInterval: cancellationOptions.waitInterval ?? INSTANCE_POLL_INTERVAL_MS,
      portToCheck: portsToCheck[0] ?? FALLBACK_PORT_TO_CHECK
    };
    if (state.status === "healthy" && this.container.running) {
      if (this.container.running && !this.monitor) {
        await this.startContainerIfNotRunning(options);
        this.setupMonitorCallbacks();
      }
      return;
    }
    await this.syncPendingStoppedEvents();
    const abortedSignal = new Promise((res) => {
      options.abort?.addEventListener("abort", () => {
        res(true);
      });
    });
    const triesUsed = await this.startContainerIfNotRunning(options);
    const triesLeft = totalPortReadyTries - triesUsed;
    for (const port of portsToCheck) {
      const tcpPort = this.container.getTcpPort(port);
      let portReady = false;
      for (let i = 0; i < triesLeft && !portReady; i++) {
        try {
          const combinedSignal = addTimeoutSignal(options.abort, PING_TIMEOUT_MS);
          await tcpPort.fetch("http://ping", { signal: combinedSignal });
          portReady = true;
          console.log(`Port ${port} is ready`);
        } catch (e) {
          const errorMessage = e instanceof Error ? e.message : String(e);
          console.warn(`Error checking ${port}: ${errorMessage}`);
          if (!this.container.running) {
            try {
              await this.onError(new Error(`Container crashed while checking for ports, did you setup the entrypoint correctly?`));
            } catch {
            }
            throw e;
          }
          if (i === triesLeft - 1) {
            try {
              await this.onError(`Failed to verify port ${port} is available after ${options.retries} attempts, last error: ${errorMessage}`);
            } catch {
            }
            throw e;
          }
          await Promise.any([
            new Promise((resolve) => setTimeout(resolve, options.waitInterval)),
            abortedSignal
          ]);
          if (options.abort?.aborted) {
            throw new Error("Container request timed out.");
          }
        }
      }
    }
    this.setupMonitorCallbacks();
    await this.ctx.blockConcurrencyWhile(async () => {
      await this.state.setHealthy();
      await this.onStart();
    });
  }
  // =======================
  //     LIFECYCLE HOOKS
  // =======================
  /**
   * Shuts down the container.
   * @param signal - The signal to send to the container (default: 15 for SIGTERM)
   */
  async stop(signal = "SIGTERM") {
    this.container.signal(typeof signal === "string" ? signalToNumbers[signal] : signal);
  }
  /**
   * Destroys the container. It will trigger onError instead of onStop.
   */
  async destroy() {
    await this.container.destroy();
  }
  /**
   * Lifecycle method called when container starts successfully
   * Override this method in subclasses to handle container start events
   */
  onStart() {
  }
  /**
   * Lifecycle method called when container shuts down
   * Override this method in subclasses to handle Container stopped events
   * @param params - Object containing exitCode and reason for the stop
   */
  onStop(_) {
  }
  /**
   * Lifecycle method called when the container is running, and the activity timeout
   * expiration has been reached.
   *
   * If you want to shutdown the container, you should call this.stop() here
   *
   * By default, this method calls `this.stop()`
   */
  async onActivityExpired() {
    if (!this.container.running) {
      return;
    }
    await this.stop();
  }
  /**
   * Error handler for container errors
   * Override this method in subclasses to handle container errors
   * @param error - The error that occurred
   * @returns Can return any value or throw the error
   */
  onError(error) {
    console.error("Container error:", error);
    throw error;
  }
  /**
   * Renew the container's activity timeout
   *
   * Call this method whenever there is activity on the container
   */
  renewActivityTimeout() {
    const timeoutInMs = parseTimeExpression(this.sleepAfter) * 1e3;
    this.sleepAfterMs = Date.now() + timeoutInMs;
  }
  // ==================
  //     SCHEDULING
  // ==================
  /**
   * Schedule a task to be executed in the future
   * @template T Type of the payload data
   * @param when When to execute the task (Date object or number of seconds delay)
   * @param callback Name of the method to call
   * @param payload Data to pass to the callback
   * @returns Schedule object representing the scheduled task
   */
  async schedule(when, callback, payload) {
    const id = generateId(9);
    if (typeof callback !== "string") {
      throw new Error("Callback must be a string (method name)");
    }
    if (typeof this[callback] !== "function") {
      throw new Error(`this.${callback} is not a function`);
    }
    if (when instanceof Date) {
      const timestamp = Math.floor(when.getTime() / 1e3);
      this.sql`
        INSERT OR REPLACE INTO container_schedules (id, callback, payload, type, time)
        VALUES (${id}, ${callback}, ${JSON.stringify(payload)}, 'scheduled', ${timestamp})
      `;
      await this.scheduleNextAlarm();
      return {
        taskId: id,
        callback,
        payload,
        time: timestamp,
        type: "scheduled"
      };
    }
    if (typeof when === "number") {
      const time = Math.floor(Date.now() / 1e3 + when);
      this.sql`
        INSERT OR REPLACE INTO container_schedules (id, callback, payload, type, delayInSeconds, time)
        VALUES (${id}, ${callback}, ${JSON.stringify(payload)}, 'delayed', ${when}, ${time})
      `;
      await this.scheduleNextAlarm();
      return {
        taskId: id,
        callback,
        payload,
        delayInSeconds: when,
        time,
        type: "delayed"
      };
    }
    throw new Error("Invalid schedule type. 'when' must be a Date or number of seconds");
  }
  // ============
  //     HTTP
  // ============
  /**
   * Send a request to the container (HTTP or WebSocket) using standard fetch API signature
   * Based on containers-starter-go implementation
   *
   * This method handles HTTP requests to the container. WebSocket requests done outside the DO*
   * won't work until https://github.com/cloudflare/workerd/issues/2319 is addressed. Until then, please use `switchPort` + `fetch()`.
   *
   * Method supports multiple signatures to match standard fetch API:
   * - containerFetch(request: Request, port?: number)
   * - containerFetch(url: string | URL, init?: RequestInit, port?: number)
   *
   * @param requestOrUrl The request object or URL string/object to send to the container
   * @param portOrInit Port number or fetch RequestInit options
   * @param portParam Optional port number when using URL+init signature
   * @returns A Response from the container, or WebSocket connection
   */
  async containerFetch(requestOrUrl, portOrInit, portParam) {
    let { request, port } = this.requestAndPortFromContainerFetchArgs(requestOrUrl, portOrInit, portParam);
    const state = await this.state.getState();
    if (!this.container.running || state.status !== "healthy") {
      try {
        await this.startAndWaitForPorts(port, { abort: request.signal });
      } catch (e) {
        if (isNoInstanceError(e)) {
          return new Response("There is no Container instance available at this time.\nThis is likely because you have reached your max concurrent instance count (set in wrangler config) or are you currently provisioning the Container.\nIf you are deploying your Container for the first time, check your dashboard to see provisioning status, this may take a few minutes.", { status: 503 });
        } else {
          return new Response(`Failed to start container: ${e instanceof Error ? e.message : String(e)}`, { status: 500 });
        }
      }
    }
    const tcpPort = this.container.getTcpPort(port);
    const containerUrl = request.url.replace("https:", "http:");
    try {
      this.renewActivityTimeout();
      const res = await tcpPort.fetch(containerUrl, request);
      return res;
    } catch (e) {
      if (!(e instanceof Error)) {
        throw e;
      }
      if (e.message.includes("Network connection lost.")) {
        return new Response("Container suddenly disconnected, try again", { status: 500 });
      }
      console.error(`Error proxying request to container ${this.ctx.id}:`, e);
      return new Response(`Error proxying request to container: ${e instanceof Error ? e.message : String(e)}`, { status: 500 });
    }
  }
  /**
   * Handle fetch requests to the Container
   * Default implementation forwards all HTTP and WebSocket requests to the container
   * Override this in your subclass to specify a port or implement custom request handling
   *
   * @param request The request to handle
   */
  async fetch(request) {
    const url = new URL(request.url);
    if (this.defaultPort === void 0 && url.port === "") {
      throw new Error("No port configured for this container. Set the defaultPort in your Container subclass, or set a port with switchPort.");
    }
    const portValue = +(url.port === "" ? this.defaultPort ?? "" : url.port);
    if (isNaN(portValue)) {
      throw new Error("port is not a number");
    }
    return await this.containerFetch(request, portValue);
  }
  // ===============================
  // ===============================
  //     PRIVATE METHODS & ATTRS
  // ===============================
  // ===============================
  // ==========================
  //     PRIVATE ATTRIBUTES
  // ==========================
  container;
  // onStopCalled will be true when we are in the middle of an onStop call
  onStopCalled = false;
  state;
  monitor;
  monitorSetup = false;
  sleepAfterMs = 0;
  // ==========================
  //     GENERAL HELPERS
  // ==========================
  /**
   * Execute SQL queries against the Container's database
   */
  sql(strings, ...values) {
    let query = "";
    query = strings.reduce((acc, str, i) => acc + str + (i < values.length ? "?" : ""), "");
    return [...this.ctx.storage.sql.exec(query, ...values)];
  }
  requestAndPortFromContainerFetchArgs(requestOrUrl, portOrInit, portParam) {
    let request;
    let port;
    if (requestOrUrl instanceof Request) {
      request = requestOrUrl;
      port = typeof portOrInit === "number" ? portOrInit : void 0;
    } else {
      const url = typeof requestOrUrl === "string" ? requestOrUrl : requestOrUrl.toString();
      const init = typeof portOrInit === "number" ? {} : portOrInit || {};
      port = typeof portOrInit === "number" ? portOrInit : typeof portParam === "number" ? portParam : void 0;
      request = new Request(url, init);
    }
    if (port === void 0 && this.defaultPort === void 0) {
      throw new Error("No port specified for container fetch. Set defaultPort or specify a port parameter.");
    }
    port = port ?? this.defaultPort;
    return { request, port };
  }
  // ===========================================
  //     CONTAINER INTERACTION & MONITORING
  // ===========================================
  // Tries to start a container if it's not running
  // Reutns the number of tries used
  async startContainerIfNotRunning(waitOptions, options) {
    if (this.container.running) {
      if (!this.monitor) {
        this.monitor = this.container.monitor();
      }
      return 0;
    }
    const abortedSignal = new Promise((res) => {
      waitOptions.abort?.addEventListener("abort", () => {
        res(true);
      });
    });
    await this.state.setRunning();
    for (let tries = 0; tries < waitOptions.retries; tries++) {
      const envVars = options?.envVars ?? this.envVars;
      const entrypoint = options?.entrypoint ?? this.entrypoint;
      const enableInternet = options?.enableInternet ?? this.enableInternet;
      const startConfig = {
        enableInternet
      };
      if (envVars && Object.keys(envVars).length > 0)
        startConfig.env = envVars;
      if (entrypoint)
        startConfig.entrypoint = entrypoint;
      this.renewActivityTimeout();
      const handleError = /* @__PURE__ */ __name(async () => {
        const err = await this.monitor?.catch((err2) => err2);
        if (typeof err === "number") {
          const toThrow = new Error(`Error starting container, early exit code 0 before we could check for healthiness, did it crash early?`);
          try {
            await this.onError(toThrow);
          } catch {
          }
          throw toThrow;
        } else if (!isNoInstanceError(err)) {
          try {
            await this.onError(err);
          } catch {
          }
          throw err;
        }
      }, "handleError");
      if (!this.container.running) {
        if (tries > 0) {
          await handleError();
        }
        await this.scheduleNextAlarm();
        this.container.start(startConfig);
        this.monitor = this.container.monitor();
      } else {
        await this.scheduleNextAlarm();
      }
      this.renewActivityTimeout();
      const port = this.container.getTcpPort(waitOptions.portToCheck);
      try {
        const combinedSignal = addTimeoutSignal(waitOptions.abort, PING_TIMEOUT_MS);
        await port.fetch("http://containerstarthealthcheck", { signal: combinedSignal });
        return tries;
      } catch (error) {
        if (isNotListeningError(error) && this.container.running) {
          return tries;
        }
        if (!this.container.running && isNotListeningError(error)) {
          await handleError();
        }
        console.warn("Error checking if container is ready:", error instanceof Error ? error.message : String(error));
        await Promise.any([
          new Promise((res) => setTimeout(res, waitOptions.waitInterval)),
          abortedSignal
        ]);
        if (waitOptions.abort?.aborted) {
          throw new Error("Aborted waiting for container to start as we received a cancellation signal");
        }
        if (TEMPORARY_HARDCODED_ATTEMPT_MAX === tries) {
          if (error instanceof Error && error.message.includes("Network connection lost")) {
            this.ctx.abort();
          }
          throw new Error(NO_CONTAINER_INSTANCE_ERROR);
        }
        continue;
      }
    }
    throw new Error(`Container did not start after ${waitOptions.retries} attempts`);
  }
  setupMonitorCallbacks() {
    if (this.monitorSetup) {
      return;
    }
    this.monitorSetup = true;
    this.monitor?.then(async () => {
      await this.ctx.blockConcurrencyWhile(async () => {
        await this.state.setStoppedWithCode(0);
      });
    }).catch(async (error) => {
      if (isNoInstanceError(error)) {
        return;
      }
      const exitCode = getExitCodeFromError(error);
      if (exitCode !== null) {
        await this.state.setStoppedWithCode(exitCode);
        this.monitorSetup = false;
        this.monitor = void 0;
        return;
      }
      try {
        await this.onError(error);
      } catch {
      }
    }).finally(() => {
      this.monitorSetup = false;
      if (this.timeout) {
        if (this.resolve)
          this.resolve();
        clearTimeout(this.timeout);
      }
    });
  }
  deleteSchedules(name) {
    this.sql`DELETE FROM container_schedules WHERE callback = ${name}`;
  }
  // ============================
  //     ALARMS AND SCHEDULES
  // ============================
  /**
   * Method called when an alarm fires
   * Executes any scheduled tasks that are due
   */
  async alarm(alarmProps) {
    if (alarmProps.isRetry && alarmProps.retryCount > MAX_ALARM_RETRIES) {
      const scheduleCount = Number(this.sql`SELECT COUNT(*) as count FROM container_schedules`[0]?.count) || 0;
      const hasScheduledTasks = scheduleCount > 0;
      if (hasScheduledTasks || this.container.running) {
        await this.scheduleNextAlarm();
      }
      return;
    }
    const prevAlarm = Date.now();
    await this.ctx.storage.setAlarm(prevAlarm);
    await this.ctx.storage.sync();
    const result = this.sql`
         SELECT * FROM container_schedules;
       `;
    let minTime = Date.now() + 3 * 60 * 1e3;
    const now = Date.now() / 1e3;
    for (const row of result) {
      if (row.time > now) {
        continue;
      }
      const callback = this[row.callback];
      if (!callback || typeof callback !== "function") {
        console.error(`Callback ${row.callback} not found or is not a function`);
        continue;
      }
      const schedule = this.getSchedule(row.id);
      try {
        const payload = row.payload ? JSON.parse(row.payload) : void 0;
        await callback.call(this, payload, await schedule);
      } catch (e) {
        console.error(`Error executing scheduled callback "${row.callback}":`, e);
      }
      this.sql`DELETE FROM container_schedules WHERE id = ${row.id}`;
    }
    const resultForMinTime = this.sql`
         SELECT * FROM container_schedules;
       `;
    const minTimeFromSchedules = Math.min(...resultForMinTime.map((r) => r.time * 1e3));
    if (!this.container.running) {
      await this.syncPendingStoppedEvents();
      if (resultForMinTime.length == 0) {
        await this.ctx.storage.deleteAlarm();
      } else {
        await this.ctx.storage.setAlarm(minTimeFromSchedules);
      }
      return;
    }
    if (this.isActivityExpired()) {
      await this.onActivityExpired();
      this.renewActivityTimeout();
      return;
    }
    minTime = Math.min(minTimeFromSchedules, minTime, this.sleepAfterMs);
    const timeout = Math.max(0, minTime - Date.now());
    await new Promise((resolve) => {
      this.resolve = resolve;
      if (!this.container.running) {
        resolve();
        return;
      }
      this.timeout = setTimeout(() => {
        resolve();
      }, timeout);
    });
    await this.ctx.storage.setAlarm(Date.now());
  }
  timeout;
  resolve;
  // synchronises container state with the container source of truth to process events
  async syncPendingStoppedEvents() {
    const state = await this.state.getState();
    if (!this.container.running && state.status === "healthy") {
      await this.callOnStop({ exitCode: 0, reason: "exit" });
      return;
    }
    if (!this.container.running && state.status === "stopped_with_code") {
      await this.callOnStop({ exitCode: state.exitCode ?? 0, reason: "exit" });
      return;
    }
  }
  async callOnStop(onStopParams) {
    if (this.onStopCalled) {
      return;
    }
    this.onStopCalled = true;
    const promise = this.onStop(onStopParams);
    if (promise instanceof Promise) {
      await promise.finally(() => {
        this.onStopCalled = false;
      });
    } else {
      this.onStopCalled = false;
    }
    await this.state.setStopped();
  }
  /**
   * Schedule the next alarm based on upcoming tasks
   */
  async scheduleNextAlarm(ms = 1e3) {
    const nextTime = ms + Date.now();
    if (this.timeout) {
      if (this.resolve)
        this.resolve();
      clearTimeout(this.timeout);
    }
    await this.ctx.storage.setAlarm(nextTime);
    await this.ctx.storage.sync();
  }
  async listSchedules(name) {
    const result = this.sql`
      SELECT * FROM container_schedules WHERE callback = ${name} LIMIT 1
    `;
    if (!result || result.length === 0) {
      return [];
    }
    return result.map(this.toSchedule);
  }
  toSchedule(schedule) {
    let payload;
    try {
      payload = JSON.parse(schedule.payload);
    } catch (e) {
      console.error(`Error parsing payload for schedule ${schedule.id}:`, e);
      payload = void 0;
    }
    if (schedule.type === "delayed") {
      return {
        taskId: schedule.id,
        callback: schedule.callback,
        payload,
        type: "delayed",
        time: schedule.time,
        delayInSeconds: schedule.delayInSeconds
      };
    }
    return {
      taskId: schedule.id,
      callback: schedule.callback,
      payload,
      type: "scheduled",
      time: schedule.time
    };
  }
  /**
   * Get a scheduled task by ID
   * @template T Type of the payload data
   * @param id ID of the scheduled task
   * @returns The Schedule object or undefined if not found
   */
  async getSchedule(id) {
    const result = this.sql`
      SELECT * FROM container_schedules WHERE id = ${id} LIMIT 1
    `;
    if (!result || result.length === 0) {
      return void 0;
    }
    const schedule = result[0];
    return this.toSchedule(schedule);
  }
  isActivityExpired() {
    return this.sleepAfterMs <= Date.now();
  }
};

// node_modules/@cloudflare/containers/dist/lib/utils.js
var singletonContainerId = "cf-singleton-container";
function getContainer(binding, name) {
  const objectId = binding.idFromName(name ?? singletonContainerId);
  return binding.get(objectId);
}
__name(getContainer, "getContainer");

// src/index.ts
var MarimoContainer = class extends Container {
  constructor() {
    super(...arguments);
    // Worker will wait until this port is listening
    this.defaultPort = 2718;
    // Marimo default
    // Optional: keep warm window for idle editing
    this.sleepAfter = "2h";
    // Set access token to bypass authentication
    this.envVars = { MARIMO_ACCESS_TOKEN: "marimo123" };
  }
  static {
    __name(this, "MarimoContainer");
  }
};
var index_default = {
  async fetch(request, env) {
    return getContainer(env.MARIMO).fetch(request);
  }
};
export {
  MarimoContainer,
  index_default as default
};
//# sourceMappingURL=index.js.map

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\.wrangler\tmp\deploy-5KPDdP\index.js ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\.wrangler\tmp\deploy-5KPDdP\index.js.map:
{
  "version": 3,
  "sources": ["../../../node_modules/@cloudflare/containers/src/lib/helpers.ts", "../../../node_modules/@cloudflare/containers/src/lib/container.ts", "../../../node_modules/@cloudflare/containers/src/lib/utils.ts", "../../../src/index.ts"],
  "sourceRoot": "C:\\Users\\prabh\\OneDrive\\Documents\\GitHub\\Codegen-Hexa\\twilight-cell-b373\\.wrangler\\tmp\\deploy-5KPDdP",
  "sourcesContent": [null, null, null, "import { Container, getContainer } from \"@cloudflare/containers\";\r\n\r\nexport class MarimoContainer extends Container {\r\n  // Worker will wait until this port is listening\r\n  defaultPort = 2718; // Marimo default\r\n  // Optional: keep warm window for idle editing\r\n  sleepAfter = \"2h\";\r\n  // Set access token to bypass authentication\r\n  envVars = { MARIMO_ACCESS_TOKEN: \"marimo123\" };\r\n}\r\n\r\nexport default {\r\n  async fetch(request: Request, env: any) {\r\n    // Forward HTTP and WebSocket to the container\r\n    return getContainer(env.MARIMO).fetch(request);\r\n  },\r\n};\r\n"],
  "mappings": "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",
  "names": ["err"]
}

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\.wrangler\tmp\deploy-5KPDdP\index.js.map ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\.wrangler\tmp\deploy-DokuLU\index.js:
var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// node_modules/@cloudflare/containers/dist/lib/helpers.js
function generateId(length = 9) {
  const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  const bytes = new Uint8Array(length);
  crypto.getRandomValues(bytes);
  let result = "";
  for (let i = 0; i < length; i++) {
    result += alphabet[bytes[i] % alphabet.length];
  }
  return result;
}
__name(generateId, "generateId");
function parseTimeExpression(timeExpression) {
  if (typeof timeExpression === "number") {
    return timeExpression;
  }
  if (typeof timeExpression === "string") {
    const match = timeExpression.match(/^(\d+)([smh])$/);
    if (!match) {
      throw new Error(`invalid time expression ${timeExpression}`);
    }
    const value = parseInt(match[1]);
    const unit = match[2];
    switch (unit) {
      case "s":
        return value;
      case "m":
        return value * 60;
      case "h":
        return value * 60 * 60;
      default:
        throw new Error(`unknown time unit ${unit}`);
    }
  }
  throw new Error(`invalid type for a time expression: ${typeof timeExpression}`);
}
__name(parseTimeExpression, "parseTimeExpression");

// node_modules/@cloudflare/containers/dist/lib/container.js
import { DurableObject } from "cloudflare:workers";
var NO_CONTAINER_INSTANCE_ERROR = "there is no container instance that can be provided to this durable object";
var RUNTIME_SIGNALLED_ERROR = "runtime signalled the container to exit:";
var UNEXPECTED_EXIT_ERROR = "container exited with unexpected exit code:";
var NOT_LISTENING_ERROR = "the container is not listening";
var CONTAINER_STATE_KEY = "__CF_CONTAINER_STATE";
var MAX_ALARM_RETRIES = 3;
var PING_TIMEOUT_MS = 5e3;
var DEFAULT_SLEEP_AFTER = "10m";
var INSTANCE_POLL_INTERVAL_MS = 300;
var TIMEOUT_TO_GET_CONTAINER_SECONDS = 8;
var TIMEOUT_TO_GET_PORTS = 20;
var TRIES_TO_GET_CONTAINER = Math.ceil(TIMEOUT_TO_GET_CONTAINER_SECONDS * 1e3 / INSTANCE_POLL_INTERVAL_MS);
var TRIES_TO_GET_PORTS = Math.ceil(TIMEOUT_TO_GET_PORTS * 1e3 / INSTANCE_POLL_INTERVAL_MS);
var FALLBACK_PORT_TO_CHECK = 33;
var TEMPORARY_HARDCODED_ATTEMPT_MAX = 6;
var signalToNumbers = {
  SIGINT: 2,
  SIGTERM: 15,
  SIGKILL: 9
};
function isErrorOfType(e, matchingString) {
  const errorString = e instanceof Error ? e.message : String(e);
  return errorString.toLowerCase().includes(matchingString);
}
__name(isErrorOfType, "isErrorOfType");
var isNoInstanceError = /* @__PURE__ */ __name((error) => isErrorOfType(error, NO_CONTAINER_INSTANCE_ERROR), "isNoInstanceError");
var isRuntimeSignalledError = /* @__PURE__ */ __name((error) => isErrorOfType(error, RUNTIME_SIGNALLED_ERROR), "isRuntimeSignalledError");
var isNotListeningError = /* @__PURE__ */ __name((error) => isErrorOfType(error, NOT_LISTENING_ERROR), "isNotListeningError");
var isContainerExitNonZeroError = /* @__PURE__ */ __name((error) => isErrorOfType(error, UNEXPECTED_EXIT_ERROR), "isContainerExitNonZeroError");
function getExitCodeFromError(error) {
  if (!(error instanceof Error)) {
    return null;
  }
  if (isRuntimeSignalledError(error)) {
    return +error.message.toLowerCase().slice(error.message.toLowerCase().indexOf(RUNTIME_SIGNALLED_ERROR) + RUNTIME_SIGNALLED_ERROR.length + 1);
  }
  if (isContainerExitNonZeroError(error)) {
    return +error.message.toLowerCase().slice(error.message.toLowerCase().indexOf(UNEXPECTED_EXIT_ERROR) + UNEXPECTED_EXIT_ERROR.length + 1);
  }
  return null;
}
__name(getExitCodeFromError, "getExitCodeFromError");
function addTimeoutSignal(existingSignal, timeoutMs) {
  const controller = new AbortController();
  if (existingSignal?.aborted) {
    controller.abort();
    return controller.signal;
  }
  existingSignal?.addEventListener("abort", () => controller.abort());
  const timeoutId = setTimeout(() => controller.abort(), timeoutMs);
  controller.signal.addEventListener("abort", () => clearTimeout(timeoutId));
  return controller.signal;
}
__name(addTimeoutSignal, "addTimeoutSignal");
var ContainerState = class {
  static {
    __name(this, "ContainerState");
  }
  storage;
  status;
  constructor(storage) {
    this.storage = storage;
  }
  async setRunning() {
    await this.setStatusAndupdate("running");
  }
  async setHealthy() {
    await this.setStatusAndupdate("healthy");
  }
  async setStopping() {
    await this.setStatusAndupdate("stopping");
  }
  async setStopped() {
    await this.setStatusAndupdate("stopped");
  }
  async setStoppedWithCode(exitCode) {
    this.status = { status: "stopped_with_code", lastChange: Date.now(), exitCode };
    await this.update();
  }
  async getState() {
    if (!this.status) {
      const state = await this.storage.get(CONTAINER_STATE_KEY);
      if (!state) {
        this.status = {
          status: "stopped",
          lastChange: Date.now()
        };
        await this.update();
      } else {
        this.status = state;
      }
    }
    return this.status;
  }
  async setStatusAndupdate(status) {
    this.status = { status, lastChange: Date.now() };
    await this.update();
  }
  async update() {
    if (!this.status)
      throw new Error("status should be init");
    await this.storage.put(CONTAINER_STATE_KEY, this.status);
  }
};
var Container = class extends DurableObject {
  static {
    __name(this, "Container");
  }
  // =========================
  //     Public Attributes
  // =========================
  // Default port for the container (undefined means no default port)
  defaultPort;
  // Required ports that should be checked for availability during container startup
  // Override this in your subclass to specify ports that must be ready
  requiredPorts;
  // Timeout after which the container will sleep if no activity
  // The signal sent to the container by default is a SIGTERM.
  // The container won't get a SIGKILL if this threshold is triggered.
  sleepAfter = DEFAULT_SLEEP_AFTER;
  // Container configuration properties
  // Set these properties directly in your container instance
  envVars = {};
  entrypoint;
  enableInternet = true;
  // =========================
  //     PUBLIC INTERFACE
  // =========================
  constructor(ctx, env, options) {
    super(ctx, env);
    if (ctx.container === void 0) {
      throw new Error("Containers have not been enabled for this Durable Object class. Have you correctly setup your Wrangler config? More info: https://developers.cloudflare.com/containers/get-started/#configuration");
    }
    this.state = new ContainerState(this.ctx.storage);
    this.ctx.blockConcurrencyWhile(async () => {
      this.renewActivityTimeout();
      await this.scheduleNextAlarm();
    });
    this.container = ctx.container;
    if (options) {
      if (options.defaultPort !== void 0)
        this.defaultPort = options.defaultPort;
      if (options.sleepAfter !== void 0)
        this.sleepAfter = options.sleepAfter;
    }
    this.sql`
      CREATE TABLE IF NOT EXISTS container_schedules (
        id TEXT PRIMARY KEY NOT NULL DEFAULT (randomblob(9)),
        callback TEXT NOT NULL,
        payload TEXT,
        type TEXT NOT NULL CHECK(type IN ('scheduled', 'delayed')),
        time INTEGER NOT NULL,
        delayInSeconds INTEGER,
        created_at INTEGER DEFAULT (unixepoch())
      )
    `;
    if (this.container.running) {
      this.monitor = this.container.monitor();
      this.setupMonitorCallbacks();
    }
  }
  /**
   * Gets the current state of the container
   * @returns Promise<State>
   */
  async getState() {
    return { ...await this.state.getState() };
  }
  // ==========================
  //     CONTAINER STARTING
  // ==========================
  /**
   * Start the container if it's not running and set up monitoring
   *
   * This method handles the core container startup process without waiting for ports to be ready.
   * It will automatically retry if the container fails to start, up to maxTries attempts.
   *
   * It's useful when you need to:
   * - Start a container without blocking until a port is available
   * - Initialize a container that doesn't expose ports
   * - Perform custom port availability checks separately
   *
   * The method applies the container configuration from your instance properties by default, but allows
   * overriding these values for this specific startup:
   * - Environment variables (defaults to this.envVars)
   * - Custom entrypoint commands (defaults to this.entrypoint)
   * - Internet access settings (defaults to this.enableInternet)
   *
   * It also sets up monitoring to track container lifecycle events and automatically
   * calls the onStop handler when the container terminates.
   *
   * @example
   * // Basic usage in a custom Container implementation
   * async customInitialize() {
   *   // Start the container without waiting for a port
   *   await this.start();
   *
   *   // Perform additional initialization steps
   *   // that don't require port access
   * }
   *
   * @example
   * // Start with custom configuration
   * await this.start({
   *   envVars: { DEBUG: 'true', NODE_ENV: 'development' },
   *   entrypoint: ['npm', 'run', 'dev'],
   *   enableInternet: false
   * });
   *
   * @param options - Optional configuration to override instance defaults
   * @param waitOptions - Optional wait configuration with abort signal for cancellation
   * @returns A promise that resolves when the container start command has been issued
   * @throws Error if no container context is available or if all start attempts fail
   */
  async start(options, waitOptions) {
    const portToCheck = this.defaultPort ?? (this.requiredPorts ? this.requiredPorts[0] : FALLBACK_PORT_TO_CHECK);
    await this.startContainerIfNotRunning({
      abort: waitOptions?.signal,
      waitInterval: INSTANCE_POLL_INTERVAL_MS,
      retries: TRIES_TO_GET_CONTAINER,
      portToCheck
    }, options);
    this.setupMonitorCallbacks();
    await this.ctx.blockConcurrencyWhile(async () => {
      await this.onStart();
    });
  }
  /**
   * Start the container and wait for ports to be available
   * Based on containers-starter-go implementation
   *
   * This method builds on start() by adding port availability verification:
   * 1. Calls start() to ensure the container is running
   * 2. If no ports are specified and requiredPorts is not set, it uses defaultPort (if set)
   * 3. If no ports can be determined, it calls onStart and renewActivityTimeout immediately
   * 4. For each specified port, it polls until the port is available or maxTries is reached
   * 5. When all ports are available, it triggers onStart and renewActivityTimeout
   *
   * The method prioritizes port sources in this order:
   * 1. Ports specified directly in the method call
   * 2. requiredPorts class property (if set)
   * 3. defaultPort (if neither of the above is specified)
   *
   * @param ports - The ports to wait for (if undefined, uses requiredPorts or defaultPort)
   * @param maxTries - Maximum number of attempts to connect to each port before failing
   * @throws Error if port checks fail after maxTries attempts
   */
  async startAndWaitForPorts(ports, cancellationOptions) {
    let portsToCheck = [];
    if (ports !== void 0) {
      portsToCheck = Array.isArray(ports) ? ports : [ports];
    } else if (this.requiredPorts && this.requiredPorts.length > 0) {
      portsToCheck = [...this.requiredPorts];
    } else if (this.defaultPort !== void 0) {
      portsToCheck = [this.defaultPort];
    }
    const state = await this.state.getState();
    cancellationOptions ??= {};
    let containerGetRetries = cancellationOptions.instanceGetTimeoutMS ? Math.ceil(cancellationOptions.instanceGetTimeoutMS / INSTANCE_POLL_INTERVAL_MS) : TRIES_TO_GET_CONTAINER;
    cancellationOptions ??= {};
    let totalPortReadyTries = cancellationOptions.portReadyTimeoutMS ? Math.ceil(cancellationOptions.portReadyTimeoutMS / INSTANCE_POLL_INTERVAL_MS) : TRIES_TO_GET_PORTS;
    const options = {
      abort: cancellationOptions.abort,
      retries: containerGetRetries,
      waitInterval: cancellationOptions.waitInterval ?? INSTANCE_POLL_INTERVAL_MS,
      portToCheck: portsToCheck[0] ?? FALLBACK_PORT_TO_CHECK
    };
    if (state.status === "healthy" && this.container.running) {
      if (this.container.running && !this.monitor) {
        await this.startContainerIfNotRunning(options);
        this.setupMonitorCallbacks();
      }
      return;
    }
    await this.syncPendingStoppedEvents();
    const abortedSignal = new Promise((res) => {
      options.abort?.addEventListener("abort", () => {
        res(true);
      });
    });
    const triesUsed = await this.startContainerIfNotRunning(options);
    const triesLeft = totalPortReadyTries - triesUsed;
    for (const port of portsToCheck) {
      const tcpPort = this.container.getTcpPort(port);
      let portReady = false;
      for (let i = 0; i < triesLeft && !portReady; i++) {
        try {
          const combinedSignal = addTimeoutSignal(options.abort, PING_TIMEOUT_MS);
          await tcpPort.fetch("http://ping", { signal: combinedSignal });
          portReady = true;
          console.log(`Port ${port} is ready`);
        } catch (e) {
          const errorMessage = e instanceof Error ? e.message : String(e);
          console.warn(`Error checking ${port}: ${errorMessage}`);
          if (!this.container.running) {
            try {
              await this.onError(new Error(`Container crashed while checking for ports, did you setup the entrypoint correctly?`));
            } catch {
            }
            throw e;
          }
          if (i === triesLeft - 1) {
            try {
              await this.onError(`Failed to verify port ${port} is available after ${options.retries} attempts, last error: ${errorMessage}`);
            } catch {
            }
            throw e;
          }
          await Promise.any([
            new Promise((resolve) => setTimeout(resolve, options.waitInterval)),
            abortedSignal
          ]);
          if (options.abort?.aborted) {
            throw new Error("Container request timed out.");
          }
        }
      }
    }
    this.setupMonitorCallbacks();
    await this.ctx.blockConcurrencyWhile(async () => {
      await this.state.setHealthy();
      await this.onStart();
    });
  }
  // =======================
  //     LIFECYCLE HOOKS
  // =======================
  /**
   * Shuts down the container.
   * @param signal - The signal to send to the container (default: 15 for SIGTERM)
   */
  async stop(signal = "SIGTERM") {
    this.container.signal(typeof signal === "string" ? signalToNumbers[signal] : signal);
  }
  /**
   * Destroys the container. It will trigger onError instead of onStop.
   */
  async destroy() {
    await this.container.destroy();
  }
  /**
   * Lifecycle method called when container starts successfully
   * Override this method in subclasses to handle container start events
   */
  onStart() {
  }
  /**
   * Lifecycle method called when container shuts down
   * Override this method in subclasses to handle Container stopped events
   * @param params - Object containing exitCode and reason for the stop
   */
  onStop(_) {
  }
  /**
   * Lifecycle method called when the container is running, and the activity timeout
   * expiration has been reached.
   *
   * If you want to shutdown the container, you should call this.stop() here
   *
   * By default, this method calls `this.stop()`
   */
  async onActivityExpired() {
    if (!this.container.running) {
      return;
    }
    await this.stop();
  }
  /**
   * Error handler for container errors
   * Override this method in subclasses to handle container errors
   * @param error - The error that occurred
   * @returns Can return any value or throw the error
   */
  onError(error) {
    console.error("Container error:", error);
    throw error;
  }
  /**
   * Renew the container's activity timeout
   *
   * Call this method whenever there is activity on the container
   */
  renewActivityTimeout() {
    const timeoutInMs = parseTimeExpression(this.sleepAfter) * 1e3;
    this.sleepAfterMs = Date.now() + timeoutInMs;
  }
  // ==================
  //     SCHEDULING
  // ==================
  /**
   * Schedule a task to be executed in the future
   * @template T Type of the payload data
   * @param when When to execute the task (Date object or number of seconds delay)
   * @param callback Name of the method to call
   * @param payload Data to pass to the callback
   * @returns Schedule object representing the scheduled task
   */
  async schedule(when, callback, payload) {
    const id = generateId(9);
    if (typeof callback !== "string") {
      throw new Error("Callback must be a string (method name)");
    }
    if (typeof this[callback] !== "function") {
      throw new Error(`this.${callback} is not a function`);
    }
    if (when instanceof Date) {
      const timestamp = Math.floor(when.getTime() / 1e3);
      this.sql`
        INSERT OR REPLACE INTO container_schedules (id, callback, payload, type, time)
        VALUES (${id}, ${callback}, ${JSON.stringify(payload)}, 'scheduled', ${timestamp})
      `;
      await this.scheduleNextAlarm();
      return {
        taskId: id,
        callback,
        payload,
        time: timestamp,
        type: "scheduled"
      };
    }
    if (typeof when === "number") {
      const time = Math.floor(Date.now() / 1e3 + when);
      this.sql`
        INSERT OR REPLACE INTO container_schedules (id, callback, payload, type, delayInSeconds, time)
        VALUES (${id}, ${callback}, ${JSON.stringify(payload)}, 'delayed', ${when}, ${time})
      `;
      await this.scheduleNextAlarm();
      return {
        taskId: id,
        callback,
        payload,
        delayInSeconds: when,
        time,
        type: "delayed"
      };
    }
    throw new Error("Invalid schedule type. 'when' must be a Date or number of seconds");
  }
  // ============
  //     HTTP
  // ============
  /**
   * Send a request to the container (HTTP or WebSocket) using standard fetch API signature
   * Based on containers-starter-go implementation
   *
   * This method handles HTTP requests to the container. WebSocket requests done outside the DO*
   * won't work until https://github.com/cloudflare/workerd/issues/2319 is addressed. Until then, please use `switchPort` + `fetch()`.
   *
   * Method supports multiple signatures to match standard fetch API:
   * - containerFetch(request: Request, port?: number)
   * - containerFetch(url: string | URL, init?: RequestInit, port?: number)
   *
   * @param requestOrUrl The request object or URL string/object to send to the container
   * @param portOrInit Port number or fetch RequestInit options
   * @param portParam Optional port number when using URL+init signature
   * @returns A Response from the container, or WebSocket connection
   */
  async containerFetch(requestOrUrl, portOrInit, portParam) {
    let { request, port } = this.requestAndPortFromContainerFetchArgs(requestOrUrl, portOrInit, portParam);
    const state = await this.state.getState();
    if (!this.container.running || state.status !== "healthy") {
      try {
        await this.startAndWaitForPorts(port, { abort: request.signal });
      } catch (e) {
        if (isNoInstanceError(e)) {
          return new Response("There is no Container instance available at this time.\nThis is likely because you have reached your max concurrent instance count (set in wrangler config) or are you currently provisioning the Container.\nIf you are deploying your Container for the first time, check your dashboard to see provisioning status, this may take a few minutes.", { status: 503 });
        } else {
          return new Response(`Failed to start container: ${e instanceof Error ? e.message : String(e)}`, { status: 500 });
        }
      }
    }
    const tcpPort = this.container.getTcpPort(port);
    const containerUrl = request.url.replace("https:", "http:");
    try {
      this.renewActivityTimeout();
      const res = await tcpPort.fetch(containerUrl, request);
      return res;
    } catch (e) {
      if (!(e instanceof Error)) {
        throw e;
      }
      if (e.message.includes("Network connection lost.")) {
        return new Response("Container suddenly disconnected, try again", { status: 500 });
      }
      console.error(`Error proxying request to container ${this.ctx.id}:`, e);
      return new Response(`Error proxying request to container: ${e instanceof Error ? e.message : String(e)}`, { status: 500 });
    }
  }
  /**
   * Handle fetch requests to the Container
   * Default implementation forwards all HTTP and WebSocket requests to the container
   * Override this in your subclass to specify a port or implement custom request handling
   *
   * @param request The request to handle
   */
  async fetch(request) {
    const url = new URL(request.url);
    if (this.defaultPort === void 0 && url.port === "") {
      throw new Error("No port configured for this container. Set the defaultPort in your Container subclass, or set a port with switchPort.");
    }
    const portValue = +(url.port === "" ? this.defaultPort ?? "" : url.port);
    if (isNaN(portValue)) {
      throw new Error("port is not a number");
    }
    return await this.containerFetch(request, portValue);
  }
  // ===============================
  // ===============================
  //     PRIVATE METHODS & ATTRS
  // ===============================
  // ===============================
  // ==========================
  //     PRIVATE ATTRIBUTES
  // ==========================
  container;
  // onStopCalled will be true when we are in the middle of an onStop call
  onStopCalled = false;
  state;
  monitor;
  monitorSetup = false;
  sleepAfterMs = 0;
  // ==========================
  //     GENERAL HELPERS
  // ==========================
  /**
   * Execute SQL queries against the Container's database
   */
  sql(strings, ...values) {
    let query = "";
    query = strings.reduce((acc, str, i) => acc + str + (i < values.length ? "?" : ""), "");
    return [...this.ctx.storage.sql.exec(query, ...values)];
  }
  requestAndPortFromContainerFetchArgs(requestOrUrl, portOrInit, portParam) {
    let request;
    let port;
    if (requestOrUrl instanceof Request) {
      request = requestOrUrl;
      port = typeof portOrInit === "number" ? portOrInit : void 0;
    } else {
      const url = typeof requestOrUrl === "string" ? requestOrUrl : requestOrUrl.toString();
      const init = typeof portOrInit === "number" ? {} : portOrInit || {};
      port = typeof portOrInit === "number" ? portOrInit : typeof portParam === "number" ? portParam : void 0;
      request = new Request(url, init);
    }
    if (port === void 0 && this.defaultPort === void 0) {
      throw new Error("No port specified for container fetch. Set defaultPort or specify a port parameter.");
    }
    port = port ?? this.defaultPort;
    return { request, port };
  }
  // ===========================================
  //     CONTAINER INTERACTION & MONITORING
  // ===========================================
  // Tries to start a container if it's not running
  // Reutns the number of tries used
  async startContainerIfNotRunning(waitOptions, options) {
    if (this.container.running) {
      if (!this.monitor) {
        this.monitor = this.container.monitor();
      }
      return 0;
    }
    const abortedSignal = new Promise((res) => {
      waitOptions.abort?.addEventListener("abort", () => {
        res(true);
      });
    });
    await this.state.setRunning();
    for (let tries = 0; tries < waitOptions.retries; tries++) {
      const envVars = options?.envVars ?? this.envVars;
      const entrypoint = options?.entrypoint ?? this.entrypoint;
      const enableInternet = options?.enableInternet ?? this.enableInternet;
      const startConfig = {
        enableInternet
      };
      if (envVars && Object.keys(envVars).length > 0)
        startConfig.env = envVars;
      if (entrypoint)
        startConfig.entrypoint = entrypoint;
      this.renewActivityTimeout();
      const handleError = /* @__PURE__ */ __name(async () => {
        const err = await this.monitor?.catch((err2) => err2);
        if (typeof err === "number") {
          const toThrow = new Error(`Error starting container, early exit code 0 before we could check for healthiness, did it crash early?`);
          try {
            await this.onError(toThrow);
          } catch {
          }
          throw toThrow;
        } else if (!isNoInstanceError(err)) {
          try {
            await this.onError(err);
          } catch {
          }
          throw err;
        }
      }, "handleError");
      if (!this.container.running) {
        if (tries > 0) {
          await handleError();
        }
        await this.scheduleNextAlarm();
        this.container.start(startConfig);
        this.monitor = this.container.monitor();
      } else {
        await this.scheduleNextAlarm();
      }
      this.renewActivityTimeout();
      const port = this.container.getTcpPort(waitOptions.portToCheck);
      try {
        const combinedSignal = addTimeoutSignal(waitOptions.abort, PING_TIMEOUT_MS);
        await port.fetch("http://containerstarthealthcheck", { signal: combinedSignal });
        return tries;
      } catch (error) {
        if (isNotListeningError(error) && this.container.running) {
          return tries;
        }
        if (!this.container.running && isNotListeningError(error)) {
          await handleError();
        }
        console.warn("Error checking if container is ready:", error instanceof Error ? error.message : String(error));
        await Promise.any([
          new Promise((res) => setTimeout(res, waitOptions.waitInterval)),
          abortedSignal
        ]);
        if (waitOptions.abort?.aborted) {
          throw new Error("Aborted waiting for container to start as we received a cancellation signal");
        }
        if (TEMPORARY_HARDCODED_ATTEMPT_MAX === tries) {
          if (error instanceof Error && error.message.includes("Network connection lost")) {
            this.ctx.abort();
          }
          throw new Error(NO_CONTAINER_INSTANCE_ERROR);
        }
        continue;
      }
    }
    throw new Error(`Container did not start after ${waitOptions.retries} attempts`);
  }
  setupMonitorCallbacks() {
    if (this.monitorSetup) {
      return;
    }
    this.monitorSetup = true;
    this.monitor?.then(async () => {
      await this.ctx.blockConcurrencyWhile(async () => {
        await this.state.setStoppedWithCode(0);
      });
    }).catch(async (error) => {
      if (isNoInstanceError(error)) {
        return;
      }
      const exitCode = getExitCodeFromError(error);
      if (exitCode !== null) {
        await this.state.setStoppedWithCode(exitCode);
        this.monitorSetup = false;
        this.monitor = void 0;
        return;
      }
      try {
        await this.onError(error);
      } catch {
      }
    }).finally(() => {
      this.monitorSetup = false;
      if (this.timeout) {
        if (this.resolve)
          this.resolve();
        clearTimeout(this.timeout);
      }
    });
  }
  deleteSchedules(name) {
    this.sql`DELETE FROM container_schedules WHERE callback = ${name}`;
  }
  // ============================
  //     ALARMS AND SCHEDULES
  // ============================
  /**
   * Method called when an alarm fires
   * Executes any scheduled tasks that are due
   */
  async alarm(alarmProps) {
    if (alarmProps.isRetry && alarmProps.retryCount > MAX_ALARM_RETRIES) {
      const scheduleCount = Number(this.sql`SELECT COUNT(*) as count FROM container_schedules`[0]?.count) || 0;
      const hasScheduledTasks = scheduleCount > 0;
      if (hasScheduledTasks || this.container.running) {
        await this.scheduleNextAlarm();
      }
      return;
    }
    const prevAlarm = Date.now();
    await this.ctx.storage.setAlarm(prevAlarm);
    await this.ctx.storage.sync();
    const result = this.sql`
         SELECT * FROM container_schedules;
       `;
    let minTime = Date.now() + 3 * 60 * 1e3;
    const now = Date.now() / 1e3;
    for (const row of result) {
      if (row.time > now) {
        continue;
      }
      const callback = this[row.callback];
      if (!callback || typeof callback !== "function") {
        console.error(`Callback ${row.callback} not found or is not a function`);
        continue;
      }
      const schedule = this.getSchedule(row.id);
      try {
        const payload = row.payload ? JSON.parse(row.payload) : void 0;
        await callback.call(this, payload, await schedule);
      } catch (e) {
        console.error(`Error executing scheduled callback "${row.callback}":`, e);
      }
      this.sql`DELETE FROM container_schedules WHERE id = ${row.id}`;
    }
    const resultForMinTime = this.sql`
         SELECT * FROM container_schedules;
       `;
    const minTimeFromSchedules = Math.min(...resultForMinTime.map((r) => r.time * 1e3));
    if (!this.container.running) {
      await this.syncPendingStoppedEvents();
      if (resultForMinTime.length == 0) {
        await this.ctx.storage.deleteAlarm();
      } else {
        await this.ctx.storage.setAlarm(minTimeFromSchedules);
      }
      return;
    }
    if (this.isActivityExpired()) {
      await this.onActivityExpired();
      this.renewActivityTimeout();
      return;
    }
    minTime = Math.min(minTimeFromSchedules, minTime, this.sleepAfterMs);
    const timeout = Math.max(0, minTime - Date.now());
    await new Promise((resolve) => {
      this.resolve = resolve;
      if (!this.container.running) {
        resolve();
        return;
      }
      this.timeout = setTimeout(() => {
        resolve();
      }, timeout);
    });
    await this.ctx.storage.setAlarm(Date.now());
  }
  timeout;
  resolve;
  // synchronises container state with the container source of truth to process events
  async syncPendingStoppedEvents() {
    const state = await this.state.getState();
    if (!this.container.running && state.status === "healthy") {
      await this.callOnStop({ exitCode: 0, reason: "exit" });
      return;
    }
    if (!this.container.running && state.status === "stopped_with_code") {
      await this.callOnStop({ exitCode: state.exitCode ?? 0, reason: "exit" });
      return;
    }
  }
  async callOnStop(onStopParams) {
    if (this.onStopCalled) {
      return;
    }
    this.onStopCalled = true;
    const promise = this.onStop(onStopParams);
    if (promise instanceof Promise) {
      await promise.finally(() => {
        this.onStopCalled = false;
      });
    } else {
      this.onStopCalled = false;
    }
    await this.state.setStopped();
  }
  /**
   * Schedule the next alarm based on upcoming tasks
   */
  async scheduleNextAlarm(ms = 1e3) {
    const nextTime = ms + Date.now();
    if (this.timeout) {
      if (this.resolve)
        this.resolve();
      clearTimeout(this.timeout);
    }
    await this.ctx.storage.setAlarm(nextTime);
    await this.ctx.storage.sync();
  }
  async listSchedules(name) {
    const result = this.sql`
      SELECT * FROM container_schedules WHERE callback = ${name} LIMIT 1
    `;
    if (!result || result.length === 0) {
      return [];
    }
    return result.map(this.toSchedule);
  }
  toSchedule(schedule) {
    let payload;
    try {
      payload = JSON.parse(schedule.payload);
    } catch (e) {
      console.error(`Error parsing payload for schedule ${schedule.id}:`, e);
      payload = void 0;
    }
    if (schedule.type === "delayed") {
      return {
        taskId: schedule.id,
        callback: schedule.callback,
        payload,
        type: "delayed",
        time: schedule.time,
        delayInSeconds: schedule.delayInSeconds
      };
    }
    return {
      taskId: schedule.id,
      callback: schedule.callback,
      payload,
      type: "scheduled",
      time: schedule.time
    };
  }
  /**
   * Get a scheduled task by ID
   * @template T Type of the payload data
   * @param id ID of the scheduled task
   * @returns The Schedule object or undefined if not found
   */
  async getSchedule(id) {
    const result = this.sql`
      SELECT * FROM container_schedules WHERE id = ${id} LIMIT 1
    `;
    if (!result || result.length === 0) {
      return void 0;
    }
    const schedule = result[0];
    return this.toSchedule(schedule);
  }
  isActivityExpired() {
    return this.sleepAfterMs <= Date.now();
  }
};

// node_modules/@cloudflare/containers/dist/lib/utils.js
var singletonContainerId = "cf-singleton-container";
function getContainer(binding, name) {
  const objectId = binding.idFromName(name ?? singletonContainerId);
  return binding.get(objectId);
}
__name(getContainer, "getContainer");

// src/index.ts
var MarimoContainer = class extends Container {
  constructor() {
    super(...arguments);
    // Worker will wait until this port is listening
    this.defaultPort = 2718;
    // Marimo default
    // Optional: keep warm window for idle editing
    this.sleepAfter = "2h";
  }
  static {
    __name(this, "MarimoContainer");
  }
};
var index_default = {
  async fetch(request, env) {
    const container = getContainer(env.MARIMO);
    return container.fetch(request);
  }
};
export {
  MarimoContainer,
  index_default as default
};
//# sourceMappingURL=index.js.map

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\.wrangler\tmp\deploy-DokuLU\index.js ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\.wrangler\tmp\deploy-DokuLU\index.js.map:
{
  "version": 3,
  "sources": ["../../../node_modules/@cloudflare/containers/src/lib/helpers.ts", "../../../node_modules/@cloudflare/containers/src/lib/container.ts", "../../../node_modules/@cloudflare/containers/src/lib/utils.ts", "../../../src/index.ts"],
  "sourceRoot": "C:\\Users\\prabh\\OneDrive\\Documents\\GitHub\\Codegen-Hexa\\twilight-cell-b373\\.wrangler\\tmp\\deploy-DokuLU",
  "sourcesContent": [null, null, null, "import { Container, getContainer } from \"@cloudflare/containers\";\r\n\r\nexport class MarimoContainer extends Container {\r\n  // Worker will wait until this port is listening\r\n  defaultPort = 2718; // Marimo default\r\n  // Optional: keep warm window for idle editing\r\n  sleepAfter = \"2h\";\r\n}\r\n\r\nexport default {\r\n  async fetch(request: Request, env: any) {\r\n    // Get the container instance\r\n    const container = getContainer(env.MARIMO);\r\n    \r\n    // Forward ALL requests to the Marimo container\r\n    // This ensures the notebook interface is properly served\r\n    return container.fetch(request);\r\n  },\r\n};\r\n\r\n"],
  "mappings": "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",
  "names": ["err"]
}

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\.wrangler\tmp\deploy-DokuLU\index.js.map ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\notebooks\5e7aef2d_notebook.py:

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\notebooks\5e7aef2d_notebook.py ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\notebooks\a1b2c3d4_marimo_notebook.py:
import marimo as mo

# Initialize the Marimo app
app = mo.App()

@app.cell
def __():
    """Welcome to Marimo Notebook! üöÄ"""
    mo.md("""
    # Marimo Notebook a1b2c3d4 üöÄ
    
    This notebook is running on Cloudflare Containers.
    Each session gets a unique notebook ID for isolation.
    
    **Notebook ID:** a1b2c3d4
    """)
    return "Notebook a1b2c3d4 is ready!"

@app.cell
def __():
    """Sample data generation"""
    import numpy as np
    data = np.random.randn(100)
    return data

@app.cell
def __():
    """Interactive elements"""
    slider = mo.ui.slider(0, 100, value=50, label="Value")
    return slider

@app.cell
def __():
    """Display the slider value"""
    slider_value = slider.value
    mo.md(f"**Slider value:** {slider_value}")
    return slider_value

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\notebooks\a1b2c3d4_marimo_notebook.py ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\notebooks\d6367d62_notebook.py:
import marimo as mo

# Initialize the Marimo app
app = mo.App()

@app.cell
def __():
    """Welcome to Marimo Notebook!"""
    mo.md(f"""
    # Marimo Notebook d6367d62
    
    This notebook is running on Cloudflare Containers.
    Each session gets a unique notebook ID for isolation.
    
    **Notebook ID:** d6367d62
    """)
    return f"Notebook d6367d62 is ready!"

@app.cell
def __():
    """Sample data generation"""
    import numpy as np
    data = np.random.randn(100)
    return data

@app.cell
def __():
    """Interactive elements"""
    slider = mo.ui.slider(0, 100, value=50, label="Value")
    return slider

@app.cell
def __():
    """Display the slider value"""
    slider_value = slider.value
    mo.md(f"**Slider value:** {slider_value}")
    return slider_value

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\notebooks\d6367d62_notebook.py ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\notebooks\simple_notebook.py:
import marimo as mo

# Initialize the Marimo app
app = mo.App()

@app.cell
def __():
    return "Hello from Marimo!"

@app.cell
def __():
    return 42

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\notebooks\simple_notebook.py ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\public\index.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Marimo Notebook - Redirecting...</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            color: white;
        }
        .container {
            text-align: center;
            background: rgba(255, 255, 255, 0.1);
            padding: 2rem;
            border-radius: 1rem;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        .spinner {
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-top: 3px solid white;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        h1 {
            margin: 0 0 1rem 0;
            font-size: 1.5rem;
        }
        p {
            margin: 0;
            opacity: 0.9;
        }
        .fallback {
            margin-top: 1rem;
            font-size: 0.9rem;
            opacity: 0.7;
        }
        a {
            color: white;
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="spinner"></div>
        <h1>üöÄ Launching Marimo Notebook...</h1>
        <p>Redirecting you directly to your notebook...</p>
        <div class="fallback">
            If you're not redirected automatically, 
            <a href="/">click here</a>
        </div>
    </div>

    <script>
        // Redirect to the root path so Marimo can handle routing
        const notebookUrl = '/';
        
        // Try to redirect immediately
        try {
            window.location.replace(notebookUrl);
        } catch (e) {
            // Fallback: try regular redirect
            window.location.href = notebookUrl;
        }
        
        // Backup redirect after 2 seconds if the above fails
        setTimeout(() => {
            if (window.location.pathname !== notebookUrl) {
                window.location.href = notebookUrl;
            }
        }, 2000);
    </script>
</body>
</html>

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\public\index.html ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\src\create_uuid_notebook.py:
#!/usr/bin/env python3
import uuid
import os
from pathlib import Path

def create_uuid_notebook():
    """Create a notebook with UUID-based name"""
    # Generate UUID and take first 8 characters
    notebook_id = str(uuid.uuid4())[:8]
    notebook_name = f"{notebook_id}_marimo_notebook.py"
    
    # Create notebooks directory
    notebooks_dir = Path("/app/notebooks")
    notebooks_dir.mkdir(exist_ok=True)
    
    # Create the notebook file
    notebook_path = notebooks_dir / notebook_name
    
    # Notebook content
    content = f'''import marimo as mo

@app.cell
def __():
    """Welcome to Marimo Notebook {notebook_id}! üöÄ"""
    mo.md(f"""
    # Marimo Notebook {notebook_id} üöÄ
    
    This notebook is running on Cloudflare Containers.
    Each session gets a unique notebook ID for isolation.
    
    **Notebook ID:** {notebook_id}
    """)
    return f"Notebook {notebook_id} is ready!"

@app.cell
def __():
    """Sample data generation"""
    import numpy as np
    data = np.random.randn(100)
    return data

@app.cell
def __():
    """Interactive elements"""
    slider = mo.ui.slider(0, 100, value=50, label="Value")
    return slider

@app.cell
def __():
    """Display the slider value"""
    slider_value = slider.value
    mo.md(f"**Slider value:** {slider_value}")
    return slider_value
'''
    
    # Write the notebook
    notebook_path.write_text(content)
    
    # Also create a symlink or redirect file for easy access
    redirect_path = notebooks_dir / "current_notebook.py"
    if redirect_path.exists():
        redirect_path.unlink()
    
    # Create a simple redirect file
    redirect_content = f'''# Redirect to current notebook
# Current notebook: {notebook_name}
# Access directly at: /{notebook_name}

import marimo as mo

@app.cell
def __():
    mo.md(f"""
    # Current Notebook: {notebook_name}
    
    This is a redirect. The actual notebook is at: **/{notebook_name}**
    
    [Click here to go to the notebook](/{notebook_name})
    """)
    return "Redirect to main notebook"
'''
    
    redirect_path.write_text(redirect_content)
    
    print(f"‚úÖ Created notebook: {notebook_name}")
    print(f"‚úÖ Created redirect: current_notebook.py")
    print(f"üåê Access directly at: /{notebook_name}")
    
    return notebook_name

if __name__ == "__main__":
    create_uuid_notebook()

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\src\create_uuid_notebook.py ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\src\index.ts:
import { Container, getContainer } from "@cloudflare/containers";

export class MarimoContainer extends Container {
  // Worker will wait until this port is listening
  defaultPort = 2718; // Marimo default
  // Optional: keep warm window for idle editing
  sleepAfter = "2h";
}

export class MarimoContainerV2 extends Container {
  // Worker will wait until this port is listening
  defaultPort = 2718; // Marimo default
  // Optional: keep warm window for idle editing
  sleepAfter = "2h";
}

export default {
  async fetch(request: Request, env: any) {
    // Get the container instance
    const container = getContainer(env.MARIMO);
    
    // Ensure container is started
    console.log("Starting Marimo container...");
    await container.start();
    console.log("Container started successfully");
    
    // Forward ALL requests to the Marimo container
    // This ensures the notebook interface is properly served
    return container.fetch(request);
  },
};


--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\src\index.ts ---

C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\src\start_marimo.py:
#!/usr/bin/env python3
import os
import subprocess
import time
from pathlib import Path

def main():
    """Simple startup script for Cloudflare Containers"""
    print("üöÄ Starting Marimo Container...")
    
    try:
        # Create notebooks directory
        notebooks_dir = Path("/app/notebooks")
        notebooks_dir.mkdir(exist_ok=True)
        print(f"‚úÖ Created notebooks directory: {notebooks_dir}")
        
        # Create a proper Marimo notebook
        notebook_path = notebooks_dir / "workspace.py"
        notebook_content = '''import marimo as mo

# Initialize the Marimo app
app = mo.App()

@app.cell
def __():
    return "Hello from Marimo!"

@app.cell
def __():
    return 42
'''
        notebook_path.write_text(notebook_content)
        print(f"‚úÖ Created notebook: {notebook_path}")
        
        # Test if we can run Python
        print("üß™ Testing Python execution...")
        test_result = subprocess.run(["python", "--version"], capture_output=True, text=True)
        print(f"‚úÖ Python test: {test_result.stdout.strip()}")
        
        # Test if Marimo is available
        print("üß™ Testing Marimo availability...")
        marimo_result = subprocess.run(["python", "-m", "marimo", "--version"], capture_output=True, text=True)
        print(f"‚úÖ Marimo test: {marimo_result.stdout.strip()}")
        
        # Start Marimo with the notebook file
        print("üéØ Starting Marimo...")
        cmd = [
            "python", "-m", "marimo", "edit",
            "--host", "0.0.0.0",
            "--port", "2718",
            "--headless",
            "--no-token",
            str(notebook_path)
        ]
        
        print(f"üìù Command: {' '.join(cmd)}")
        
        # Start Marimo
        process = subprocess.Popen(cmd)
        print(f"‚úÖ Marimo started with PID: {process.pid}")
        
        # Wait a moment to see if it starts successfully
        time.sleep(5)
        
        if process.poll() is None:
            print("üéâ Marimo is running successfully!")
            # Keep container alive
            process.wait()
        else:
            stdout, stderr = process.communicate()
            print(f"‚ùå Marimo failed to start:")
            print(f"STDOUT: {stdout.decode()}")
            print(f"STDERR: {stderr.decode()}")
            return 1
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())

--- End of C:\Users\prabh\OneDrive\Documents\GitHub\codegen-hexa\twilight-cell-b373\src\start_marimo.py ---

